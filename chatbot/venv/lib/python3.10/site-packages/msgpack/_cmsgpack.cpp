/* Generated by Cython 3.0.2 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_2" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030002F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        PyObject *version_info; // borrowed
        PyObject *py_minor_version = NULL;
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11; // we don't yet need to distinguish between versions > 11
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        Py_XDECREF(py_minor_version);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don't have access to __pyx_empty_bytes here
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__msgpack___cmsgpack
#define __PYX_HAVE_API__msgpack___cmsgpack
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "datetime.h"

    /* Backport for Python 2.x */
    #if PY_MAJOR_VERSION < 3
        #ifndef PyDateTime_DELTA_GET_DAYS
            #define PyDateTime_DELTA_GET_DAYS(o) (((PyDateTime_Delta*)o)->days)
        #endif
        #ifndef PyDateTime_DELTA_GET_SECONDS
            #define PyDateTime_DELTA_GET_SECONDS(o) (((PyDateTime_Delta*)o)->seconds)
        #endif
        #ifndef PyDateTime_DELTA_GET_MICROSECONDS
            #define PyDateTime_DELTA_GET_MICROSECONDS(o) (((PyDateTime_Delta*)o)->microseconds)
        #endif
    #endif

    /* Backport for Python < 3.6 */
    #if PY_VERSION_HEX < 0x030600a4
        #ifndef PyDateTime_TIME_GET_FOLD
            #define PyDateTime_TIME_GET_FOLD(o) ((void)(o), 0)
        #endif
        #ifndef PyDateTime_DATE_GET_FOLD
            #define PyDateTime_DATE_GET_FOLD(o) ((void)(o), 0)
        #endif
    #endif

    /* Backport for Python < 3.6 */
    #if PY_VERSION_HEX < 0x030600a4
        #define __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             ((void)(fold), PyDateTimeAPI->DateTime_FromDateAndTime(year, month, day, hour, minute, second,                 microsecond, tz, PyDateTimeAPI->DateTimeType))
        #define __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             ((void)(fold), PyDateTimeAPI->Time_FromTime(hour, minute, second, microsecond, tz, PyDateTimeAPI->TimeType))
    #else /* For Python 3.6+ so that we can pass tz */
        #define __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             PyDateTimeAPI->DateTime_FromDateAndTimeAndFold(year, month, day, hour, minute, second,                 microsecond, tz, fold, PyDateTimeAPI->DateTimeType)
        #define __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             PyDateTimeAPI->Time_FromTimeAndFold(hour, minute, second, microsecond, tz, fold, PyDateTimeAPI->TimeType)
    #endif

    /* Backport for Python < 3.7 */
    #if PY_VERSION_HEX < 0x030700b1
        #define __Pyx_TimeZone_UTC NULL
        #define __Pyx_TimeZone_FromOffsetAndName(offset, name) ((void)(offset), (void)(name), (PyObject*)NULL)
    #else
        #define __Pyx_TimeZone_UTC PyDateTime_TimeZone_UTC
        #define __Pyx_TimeZone_FromOffsetAndName(offset, name) PyTimeZone_FromOffsetAndName(offset, name)
    #endif

    /* Backport for Python < 3.10 */
    #if PY_VERSION_HEX < 0x030a00a1
        #ifndef PyDateTime_TIME_GET_TZINFO
            #define PyDateTime_TIME_GET_TZINFO(o)                 ((((PyDateTime_Time*)o)->hastzinfo) ? ((PyDateTime_Time*)o)->tzinfo : Py_None)
        #endif
        #ifndef PyDateTime_DATE_GET_TZINFO
            #define PyDateTime_DATE_GET_TZINFO(o)                 ((((PyDateTime_DateTime*)o)->hastzinfo) ? ((PyDateTime_DateTime*)o)->tzinfo : Py_None)
        #endif
    #endif
    
#include "pythread.h"
#include "pack.h"
#include "buff_converter.h"
#include <stdlib.h>
#include <limits.h>
#include <stdint.h>
#include "unpack.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "msgpack/_packer.pyx",
  "msgpack/_unpacker.pyx",
  "datetime.pxd",
  "contextvars.pxd",
  "<stringsource>",
  "msgpack/_cmsgpack.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7msgpack_9_cmsgpack_Packer;
struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};
struct __pyx_opt_args_7cpython_8datetime_time_new;
struct __pyx_opt_args_7cpython_8datetime_datetime_new;
struct __pyx_opt_args_7cpython_8datetime_timezone_new;
struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp;

/* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */
struct __pyx_opt_args_7cpython_8datetime_time_new {
  int __pyx_n;
  int fold;
};

/* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */
struct __pyx_opt_args_7cpython_8datetime_datetime_new {
  int __pyx_n;
  int fold;
};

/* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */
struct __pyx_opt_args_7cpython_8datetime_timezone_new {
  int __pyx_n;
  PyObject *name;
};

/* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */
struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp {
  int __pyx_n;
  PyObject *tz;
};
struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack;
struct __pyx_opt_args_7msgpack_9_cmsgpack_8Unpacker__unpack;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;

/* "msgpack/_packer.pyx":147
 *         self.pk.buf = NULL
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */
struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack {
  int __pyx_n;
  int nest_limit;
};

/* "msgpack/_unpacker.pyx":455
 *         return 0
 * 
 *     cdef object _unpack(self, execute_fn execute, bint iter=0):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         cdef object obj
 */
struct __pyx_opt_args_7msgpack_9_cmsgpack_8Unpacker__unpack {
  int __pyx_n;
  int iter;
};
struct __pyx_defaults {
  PyObject *__pyx_arg_ext_hook;
};

/* "msgpack/_packer.pyx":62
 * 
 * 
 * cdef class Packer(object):             # <<<<<<<<<<<<<<
 *     """
 *     MessagePack Packer
 */
struct __pyx_obj_7msgpack_9_cmsgpack_Packer {
  PyObject_HEAD
  struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *__pyx_vtab;
  struct msgpack_packer pk;
  PyObject *_default;
  PyObject *_berrors;
  char const *unicode_errors;
  int strict_types;
  int use_float;
  int autoreset;
  int datetime;
};


/* "msgpack/_unpacker.pyx":213
 * 
 * 
 * cdef class Unpacker(object):             # <<<<<<<<<<<<<<
 *     """Streaming unpacker.
 * 
 */
struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker {
  PyObject_HEAD
  struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Unpacker *__pyx_vtab;
  unpack_context ctx;
  char *buf;
  Py_ssize_t buf_size;
  Py_ssize_t buf_head;
  Py_ssize_t buf_tail;
  PyObject *file_like;
  PyObject *file_like_read;
  Py_ssize_t read_size;
  PyObject *object_hook;
  PyObject *object_pairs_hook;
  PyObject *list_hook;
  PyObject *ext_hook;
  PyObject *unicode_errors;
  Py_ssize_t max_buffer_size;
  uint64_t stream_offset;
};



/* "msgpack/_packer.pyx":62
 * 
 * 
 * cdef class Packer(object):             # <<<<<<<<<<<<<<
 *     """
 *     MessagePack Packer
 */

struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer {
  int (*_pack)(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *, PyObject *, struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack *__pyx_optional_args);
  PyObject *(*pack)(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *__pyx_vtabptr_7msgpack_9_cmsgpack_Packer;


/* "msgpack/_unpacker.pyx":213
 * 
 * 
 * cdef class Unpacker(object):             # <<<<<<<<<<<<<<
 *     """Streaming unpacker.
 * 
 */

struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Unpacker {
  PyObject *(*append_buffer)(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *, void *, Py_ssize_t);
  int (*read_from_file)(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *);
  PyObject *(*_unpack)(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *, execute_fn, struct __pyx_opt_args_7msgpack_9_cmsgpack_8Unpacker__unpack *__pyx_optional_args);
};
static struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Unpacker *__pyx_vtabptr_7msgpack_9_cmsgpack_Unpacker;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg // no-op
    #define __Pyx_Arg_XDECREF_VARARGS(arg) // no-op - arg is borrowed
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg // no-op, __Pyx_Arg_FASTCALL is direct and this needs
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)  // no-op - arg was returned from array
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* ReRaiseException.proto */
static CYTHON_INLINE void __Pyx_ReraiseException(void);

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_2
#define __PYX_HAVE_RT_ImportType_proto_3_0_2
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_2(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_2(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_2 {
   __Pyx_ImportType_CheckSize_Error_3_0_2 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_2 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_2 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_2(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_2 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_4year_year(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_5month_month(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_3day_day(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4hour_hour(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6minute_minute(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6second_second(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_11microsecond_microsecond(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_4time_6tzinfo_tzinfo(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4fold_fold(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4year_year(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_5month_month(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_3day_day(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4hour_hour(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6minute_minute(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6second_second(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_11microsecond_microsecond(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_8datetime_6tzinfo_tzinfo(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4fold_fold(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_3day_day(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_6second_second(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_11microsecond_microsecond(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static int __pyx_f_7msgpack_9_cmsgpack_6Packer__pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_o, struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7msgpack_9_cmsgpack_6Packer_pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7msgpack_9_cmsgpack_8Unpacker_append_buffer(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, void *__pyx_v__buf, Py_ssize_t __pyx_v__buf_len); /* proto*/
static int __pyx_f_7msgpack_9_cmsgpack_8Unpacker_read_from_file(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7msgpack_9_cmsgpack_8Unpacker__unpack(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, execute_fn __pyx_v_execute, struct __pyx_opt_args_7msgpack_9_cmsgpack_8Unpacker__unpack *__pyx_optional_args); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython.version" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "datetime" */

/* Module declarations from "cpython.datetime" */
static CYTHON_INLINE void __pyx_f_7cpython_8datetime_import_datetime(void); /*proto*/
static CYTHON_INLINE PyDateTime_DateTime *__pyx_f_7cpython_8datetime_datetime_new(int, int, int, int, int, int, int, PyObject *, struct __pyx_opt_args_7cpython_8datetime_datetime_new *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_datetime_tzinfo(PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_days(PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_seconds(PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_microseconds(PyObject *); /*proto*/

/* Module declarations from "cpython.bytearray" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libc.limits" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "msgpack._cmsgpack" */
static PyObject *__pyx_v_7msgpack_9_cmsgpack_utc = 0;
static PyObject *__pyx_v_7msgpack_9_cmsgpack_epoch = 0;
static PyObject *__pyx_v_7msgpack_9_cmsgpack_ExtType = 0;
static PyObject *__pyx_v_7msgpack_9_cmsgpack_Timestamp = 0;
static int __pyx_v_7msgpack_9_cmsgpack_DEFAULT_RECURSE_LIMIT;
static PY_LONG_LONG __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT;
static PyObject *__pyx_v_7msgpack_9_cmsgpack_giga = 0;
static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_Check(PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_CheckExact(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7msgpack_9_cmsgpack_init_ctx(unpack_context *, PyObject *, PyObject *, PyObject *, PyObject *, int, int, int, int, char const *, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_get_data_from_buffer(PyObject *, Py_buffer *, char **, Py_ssize_t *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "msgpack._cmsgpack"
extern int __pyx_module_is_main_msgpack___cmsgpack;
int __pyx_module_is_main_msgpack___cmsgpack = 0;

/* Implementation of "msgpack._cmsgpack" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_BufferError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_StopIteration;
/* #### Code section: string_decls ### */
static const char __pyx_k_d[] = "d";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k__29[] = "*";
static const char __pyx_k__30[] = ".";
static const char __pyx_k__62[] = "?";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_ext[] = "ext";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_off[] = "off";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_utc[] = "utc";
static const char __pyx_k_cerr[] = "cerr";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_feed[] = "feed";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_skip[] = "skip";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_tell[] = "tell";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_nread[] = "nread";
static const char __pyx_k_pairs[] = "pairs";
static const char __pyx_k_reset[] = "reset";
static const char __pyx_k_Packer[] = "Packer";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_nbytes[] = "nbytes";
static const char __pyx_k_packed[] = "packed";
static const char __pyx_k_pybuff[] = "pybuff";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_ExtType[] = "ExtType";
static const char __pyx_k_buf_len[] = "buf_len";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_seconds[] = "seconds";
static const char __pyx_k_unpackb[] = "unpackb";
static const char __pyx_k_Unpacker[] = "Unpacker";
static const char __pyx_k_datetime[] = "datetime";
static const char __pyx_k_ext_hook[] = "ext_hook";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_timezone[] = "timezone";
static const char __pyx_k_typecode[] = "typecode";
static const char __pyx_k_use_list[] = "use_list";
static const char __pyx_k_ExtraData[] = "ExtraData";
static const char __pyx_k_OutOfData[] = "OutOfData";
static const char __pyx_k_Timestamp[] = "Timestamp";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_autoreset[] = "autoreset";
static const char __pyx_k_file_like[] = "file_like";
static const char __pyx_k_getbuffer[] = "getbuffer";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_list_hook[] = "list_hook";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_read_size[] = "read_size";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_BufferFull[] = "BufferFull";
static const char __pyx_k_StackError[] = "StackError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_exceptions[] = "exceptions";
static const char __pyx_k_next_bytes[] = "next_bytes";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_read_bytes[] = "read_bytes";
static const char __pyx_k_BufferError[] = "BufferError";
static const char __pyx_k_FormatError[] = "FormatError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_Packer_pack[] = "Packer.pack";
static const char __pyx_k_max_bin_len[] = "max_bin_len";
static const char __pyx_k_max_ext_len[] = "max_ext_len";
static const char __pyx_k_max_map_len[] = "max_map_len";
static const char __pyx_k_max_str_len[] = "max_str_len";
static const char __pyx_k_nanoseconds[] = "nanoseconds";
static const char __pyx_k_object_hook[] = "object_hook";
static const char __pyx_k_Packer_bytes[] = "Packer.bytes";
static const char __pyx_k_Packer_reset[] = "Packer.reset";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_strict_types[] = "strict_types";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_bin_type[] = "use_bin_type";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_Unpacker_feed[] = "Unpacker.feed";
static const char __pyx_k_Unpacker_skip[] = "Unpacker.skip";
static const char __pyx_k_Unpacker_tell[] = "Unpacker.tell";
static const char __pyx_k_max_array_len[] = "max_array_len";
static const char __pyx_k_pack_ext_type[] = "pack_ext_type";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_internal_error[] = "internal error";
static const char __pyx_k_pack_map_pairs[] = "pack_map_pairs";
static const char __pyx_k_strict_map_key[] = "strict_map_key";
static const char __pyx_k_unicode_errors[] = "unicode_errors";
static const char __pyx_k_Unpacker_unpack[] = "Unpacker.unpack";
static const char __pyx_k_max_buffer_size[] = "max_buffer_size";
static const char __pyx_k_pack_map_header[] = "pack_map_header";
static const char __pyx_k_read_map_header[] = "read_map_header";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Packer_getbuffer[] = "Packer.getbuffer";
static const char __pyx_k_use_single_float[] = "use_single_float";
static const char __pyx_k_dict_is_too_large[] = "dict is too large";
static const char __pyx_k_list_is_too_large[] = "list is too large";
static const char __pyx_k_msgpack__cmsgpack[] = "msgpack._cmsgpack";
static const char __pyx_k_object_pairs_hook[] = "object_pairs_hook";
static const char __pyx_k_pack_array_header[] = "pack_array_header";
static const char __pyx_k_read_array_header[] = "read_array_header";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Unpack_failed_error[] = "Unpack failed: error = ";
static const char __pyx_k_Unpacker_read_bytes[] = "Unpacker.read_bytes";
static const char __pyx_k_msgpack__packer_pyx[] = "msgpack/_packer.pyx";
static const char __pyx_k_Packer_pack_ext_type[] = "Packer.pack_ext_type";
static const char __pyx_k_EXT_data_is_too_large[] = "EXT data is too large";
static const char __pyx_k_Packer_pack_map_pairs[] = "Packer.pack_map_pairs";
static const char __pyx_k_msgpack__unpacker_pyx[] = "msgpack/_unpacker.pyx";
static const char __pyx_k_timestamp_must_be_0_3[] = "timestamp must be 0..3";
static const char __pyx_k_No_more_data_to_unpack[] = "No more data to unpack.";
static const char __pyx_k_Packer___reduce_cython[] = "Packer.__reduce_cython__";
static const char __pyx_k_Packer_pack_map_header[] = "Packer.pack_map_header";
static const char __pyx_k_memoryview_is_too_large[] = "memoryview is too large";
static const char __pyx_k_Packer___setstate_cython[] = "Packer.__setstate_cython__";
static const char __pyx_k_Packer_pack_array_header[] = "Packer.pack_array_header";
static const char __pyx_k_Unpacker___reduce_cython[] = "Unpacker.__reduce_cython__";
static const char __pyx_k_Unpacker_read_map_header[] = "Unpacker.read_map_header";
static const char __pyx_k_recursion_limit_exceeded[] = "recursion limit exceeded.";
static const char __pyx_k_failed_to_calculate_delta[] = "failed to calculate delta";
static const char __pyx_k_Integer_value_out_of_range[] = "Integer value out of range";
static const char __pyx_k_Unpacker___setstate_cython[] = "Unpacker.__setstate_cython__";
static const char __pyx_k_Unpacker_read_array_header[] = "Unpacker.read_array_header";
static const char __pyx_k_default_must_be_a_callable[] = "default must be a callable.";
static const char __pyx_k_default_read_extended_type[] = "default_read_extended_type";
static const char __pyx_k_ext_hook_must_be_a_callable[] = "ext_hook must be a callable.";
static const char __pyx_k_unicode_string_is_too_large[] = "unicode string is too large";
static const char __pyx_k_list_hook_must_be_a_callable[] = "list_hook must be a callable.";
static const char __pyx_k_Unpack_failed_incomplete_input[] = "Unpack failed: incomplete input";
static const char __pyx_k_object_hook_must_be_a_callable[] = "object_hook must be a callable.";
static const char __pyx_k_file_like_read_must_be_a_callab[] = "`file_like.read` must be a callable.";
static const char __pyx_k_unpacker_feed_is_not_be_able_to[] = "unpacker.feed() is not be able to use with `file_like`.";
static const char __pyx_k_Cannot_decode_extended_type_with[] = "Cannot decode extended type with typecode=%d";
static const char __pyx_k_Time_zones_are_not_available_fro[] = "Time zones are not available from the C-API.";
static const char __pyx_k_Unable_to_allocate_internal_buff[] = "Unable to allocate internal buffer.";
static const char __pyx_k_Unable_to_enlarge_internal_buffe[] = "Unable to enlarge internal buffer.";
static const char __pyx_k_cannot_unpack_from_multi_byte_ob[] = "cannot unpack from multi-byte object";
static const char __pyx_k_could_not_get_buffer_for_memoryv[] = "could not get buffer for memoryview";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_object_pairs_hook_and_object_hoo[] = "object_pairs_hook and object_hook are mutually exclusive.";
static const char __pyx_k_object_pairs_hook_must_be_a_call[] = "object_pairs_hook must be a callable.";
static const char __pyx_k_read_size_should_be_less_or_equa[] = "read_size should be less or equal to max_buffer_size";
/* #### Code section: decls ### */
static int __pyx_pf_7msgpack_9_cmsgpack_6Packer___cinit__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static int __pyx_pf_7msgpack_9_cmsgpack_6Packer_2__init__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_default, int __pyx_v_use_single_float, int __pyx_v_autoreset, int __pyx_v_use_bin_type, int __pyx_v_strict_types, int __pyx_v_datetime, PyObject *__pyx_v_unicode_errors); /* proto */
static void __pyx_pf_7msgpack_9_cmsgpack_6Packer_4__dealloc__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_6pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_8pack_ext_type(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_typecode, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_10pack_array_header(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PY_LONG_LONG __pyx_v_size); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_12pack_map_header(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PY_LONG_LONG __pyx_v_size); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_14pack_map_pairs(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_pairs); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_16reset(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_18bytes(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_20getbuffer(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_default_read_extended_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_typecode, CYTHON_UNUSED PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_4__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_2unpackb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_packed, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_list_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_timestamp, int __pyx_v_strict_map_key, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len); /* proto */
static int __pyx_pf_7msgpack_9_cmsgpack_8Unpacker___cinit__(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static void __pyx_pf_7msgpack_9_cmsgpack_8Unpacker_2__dealloc__(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static int __pyx_pf_7msgpack_9_cmsgpack_8Unpacker_4__init__(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, PyObject *__pyx_v_file_like, Py_ssize_t __pyx_v_read_size, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_timestamp, int __pyx_v_strict_map_key, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_list_hook, PyObject *__pyx_v_unicode_errors, Py_ssize_t __pyx_v_max_buffer_size, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_6feed(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, PyObject *__pyx_v_next_bytes); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_8read_bytes(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, Py_ssize_t __pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_10unpack(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_12skip(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_14read_array_header(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_16read_map_header(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_18tell(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_20__iter__(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_22__next__(struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_9_cmsgpack_8Unpacker_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Unpacker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7msgpack_9_cmsgpack_Packer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7msgpack_9_cmsgpack_Unpacker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_8datetime_date;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_time;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_datetime;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_timedelta;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_tzinfo;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_7msgpack_9_cmsgpack_Packer;
  PyObject *__pyx_type_7msgpack_9_cmsgpack_Unpacker;
  #endif
  PyTypeObject *__pyx_ptype_7msgpack_9_cmsgpack_Packer;
  PyTypeObject *__pyx_ptype_7msgpack_9_cmsgpack_Unpacker;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_BufferError;
  PyObject *__pyx_n_s_BufferFull;
  PyObject *__pyx_kp_u_Cannot_decode_extended_type_with;
  PyObject *__pyx_kp_u_EXT_data_is_too_large;
  PyObject *__pyx_n_s_ExtType;
  PyObject *__pyx_n_s_ExtraData;
  PyObject *__pyx_n_s_FormatError;
  PyObject *__pyx_kp_u_Integer_value_out_of_range;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_u_No_more_data_to_unpack;
  PyObject *__pyx_n_s_NotImplementedError;
  PyObject *__pyx_n_s_OutOfData;
  PyObject *__pyx_n_s_OverflowError;
  PyObject *__pyx_n_s_Packer;
  PyObject *__pyx_n_s_Packer___reduce_cython;
  PyObject *__pyx_n_s_Packer___setstate_cython;
  PyObject *__pyx_n_s_Packer_bytes;
  PyObject *__pyx_n_s_Packer_getbuffer;
  PyObject *__pyx_n_s_Packer_pack;
  PyObject *__pyx_n_s_Packer_pack_array_header;
  PyObject *__pyx_n_s_Packer_pack_ext_type;
  PyObject *__pyx_n_s_Packer_pack_map_header;
  PyObject *__pyx_n_s_Packer_pack_map_pairs;
  PyObject *__pyx_n_s_Packer_reset;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_StackError;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_kp_u_Time_zones_are_not_available_fro;
  PyObject *__pyx_n_s_Timestamp;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_Unable_to_allocate_internal_buff;
  PyObject *__pyx_kp_u_Unable_to_enlarge_internal_buffe;
  PyObject *__pyx_kp_u_Unpack_failed_error;
  PyObject *__pyx_kp_u_Unpack_failed_incomplete_input;
  PyObject *__pyx_n_s_Unpacker;
  PyObject *__pyx_n_s_Unpacker___reduce_cython;
  PyObject *__pyx_n_s_Unpacker___setstate_cython;
  PyObject *__pyx_n_s_Unpacker_feed;
  PyObject *__pyx_n_s_Unpacker_read_array_header;
  PyObject *__pyx_n_s_Unpacker_read_bytes;
  PyObject *__pyx_n_s_Unpacker_read_map_header;
  PyObject *__pyx_n_s_Unpacker_skip;
  PyObject *__pyx_n_s_Unpacker_tell;
  PyObject *__pyx_n_s_Unpacker_unpack;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__29;
  PyObject *__pyx_kp_u__30;
  PyObject *__pyx_n_s__62;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_autoreset;
  PyObject *__pyx_n_s_buf;
  PyObject *__pyx_n_s_buf_len;
  PyObject *__pyx_n_s_bytes;
  PyObject *__pyx_kp_u_cannot_unpack_from_multi_byte_ob;
  PyObject *__pyx_n_s_cerr;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_code;
  PyObject *__pyx_kp_u_could_not_get_buffer_for_memoryv;
  PyObject *__pyx_n_s_ctx;
  PyObject *__pyx_n_u_d;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_datetime;
  PyObject *__pyx_n_s_default;
  PyObject *__pyx_kp_u_default_must_be_a_callable;
  PyObject *__pyx_n_s_default_read_extended_type;
  PyObject *__pyx_kp_u_dict_is_too_large;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_exceptions;
  PyObject *__pyx_n_s_ext;
  PyObject *__pyx_n_s_ext_hook;
  PyObject *__pyx_kp_u_ext_hook_must_be_a_callable;
  PyObject *__pyx_kp_u_failed_to_calculate_delta;
  PyObject *__pyx_n_s_feed;
  PyObject *__pyx_n_s_file_like;
  PyObject *__pyx_kp_u_file_like_read_must_be_a_callab;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getbuffer;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_kp_u_internal_error;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_list_hook;
  PyObject *__pyx_kp_u_list_hook_must_be_a_callable;
  PyObject *__pyx_kp_u_list_is_too_large;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max_array_len;
  PyObject *__pyx_n_s_max_bin_len;
  PyObject *__pyx_n_s_max_buffer_size;
  PyObject *__pyx_n_s_max_ext_len;
  PyObject *__pyx_n_s_max_map_len;
  PyObject *__pyx_n_s_max_str_len;
  PyObject *__pyx_kp_u_memoryview_is_too_large;
  PyObject *__pyx_n_s_msgpack__cmsgpack;
  PyObject *__pyx_kp_s_msgpack__packer_pyx;
  PyObject *__pyx_kp_s_msgpack__unpacker_pyx;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nanoseconds;
  PyObject *__pyx_n_s_nbytes;
  PyObject *__pyx_n_s_next_bytes;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_nread;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_object_hook;
  PyObject *__pyx_kp_u_object_hook_must_be_a_callable;
  PyObject *__pyx_n_s_object_pairs_hook;
  PyObject *__pyx_kp_u_object_pairs_hook_and_object_hoo;
  PyObject *__pyx_kp_u_object_pairs_hook_must_be_a_call;
  PyObject *__pyx_n_s_off;
  PyObject *__pyx_n_s_pack;
  PyObject *__pyx_n_s_pack_array_header;
  PyObject *__pyx_n_s_pack_ext_type;
  PyObject *__pyx_n_s_pack_map_header;
  PyObject *__pyx_n_s_pack_map_pairs;
  PyObject *__pyx_n_s_packed;
  PyObject *__pyx_n_s_pairs;
  PyObject *__pyx_n_s_pybuff;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_raw;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_read_array_header;
  PyObject *__pyx_n_s_read_bytes;
  PyObject *__pyx_n_s_read_map_header;
  PyObject *__pyx_n_s_read_size;
  PyObject *__pyx_kp_u_read_size_should_be_less_or_equa;
  PyObject *__pyx_kp_u_recursion_limit_exceeded;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_reset;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_seconds;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_skip;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_strict_map_key;
  PyObject *__pyx_n_s_strict_types;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_tell;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_timestamp;
  PyObject *__pyx_kp_u_timestamp_must_be_0_3;
  PyObject *__pyx_n_s_timezone;
  PyObject *__pyx_n_s_typecode;
  PyObject *__pyx_n_s_unicode_errors;
  PyObject *__pyx_kp_u_unicode_string_is_too_large;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_unpackb;
  PyObject *__pyx_kp_u_unpacker_feed_is_not_be_able_to;
  PyObject *__pyx_n_s_use_bin_type;
  PyObject *__pyx_n_s_use_list;
  PyObject *__pyx_n_s_use_single_float;
  PyObject *__pyx_n_s_utc;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_view;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1000000000;
  int __pyx_k__4;
  PyObject *__pyx_k__23;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_date);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_time);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_datetime);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_timedelta);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_tzinfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_7msgpack_9_cmsgpack_Packer);
  Py_CLEAR(clear_module_state->__pyx_type_7msgpack_9_cmsgpack_Packer);
  Py_CLEAR(clear_module_state->__pyx_ptype_7msgpack_9_cmsgpack_Unpacker);
  Py_CLEAR(clear_module_state->__pyx_type_7msgpack_9_cmsgpack_Unpacker);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_BufferError);
  Py_CLEAR(clear_module_state->__pyx_n_s_BufferFull);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_decode_extended_type_with);
  Py_CLEAR(clear_module_state->__pyx_kp_u_EXT_data_is_too_large);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtType);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtraData);
  Py_CLEAR(clear_module_state->__pyx_n_s_FormatError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Integer_value_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_more_data_to_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplementedError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OutOfData);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverflowError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_getbuffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_pack_array_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_pack_ext_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_pack_map_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_pack_map_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_Packer_reset);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_StackError);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Time_zones_are_not_available_fro);
  Py_CLEAR(clear_module_state->__pyx_n_s_Timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unable_to_allocate_internal_buff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unable_to_enlarge_internal_buffe);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unpack_failed_error);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unpack_failed_incomplete_input);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_feed);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_read_array_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_read_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_read_map_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_skip);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_tell);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unpacker_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__29);
  Py_CLEAR(clear_module_state->__pyx_kp_u__30);
  Py_CLEAR(clear_module_state->__pyx_n_s__62);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_autoreset);
  Py_CLEAR(clear_module_state->__pyx_n_s_buf);
  Py_CLEAR(clear_module_state->__pyx_n_s_buf_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_bytes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_cannot_unpack_from_multi_byte_ob);
  Py_CLEAR(clear_module_state->__pyx_n_s_cerr);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_code);
  Py_CLEAR(clear_module_state->__pyx_kp_u_could_not_get_buffer_for_memoryv);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctx);
  Py_CLEAR(clear_module_state->__pyx_n_u_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_datetime);
  Py_CLEAR(clear_module_state->__pyx_n_s_default);
  Py_CLEAR(clear_module_state->__pyx_kp_u_default_must_be_a_callable);
  Py_CLEAR(clear_module_state->__pyx_n_s_default_read_extended_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dict_is_too_large);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_exceptions);
  Py_CLEAR(clear_module_state->__pyx_n_s_ext);
  Py_CLEAR(clear_module_state->__pyx_n_s_ext_hook);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ext_hook_must_be_a_callable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_failed_to_calculate_delta);
  Py_CLEAR(clear_module_state->__pyx_n_s_feed);
  Py_CLEAR(clear_module_state->__pyx_n_s_file_like);
  Py_CLEAR(clear_module_state->__pyx_kp_u_file_like_read_must_be_a_callab);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getbuffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_kp_u_internal_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_hook);
  Py_CLEAR(clear_module_state->__pyx_kp_u_list_hook_must_be_a_callable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_list_is_too_large);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_array_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_bin_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_buffer_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_ext_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_map_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_str_len);
  Py_CLEAR(clear_module_state->__pyx_kp_u_memoryview_is_too_large);
  Py_CLEAR(clear_module_state->__pyx_n_s_msgpack__cmsgpack);
  Py_CLEAR(clear_module_state->__pyx_kp_s_msgpack__packer_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_s_msgpack__unpacker_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nanoseconds);
  Py_CLEAR(clear_module_state->__pyx_n_s_nbytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_next_bytes);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_nread);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_object_hook);
  Py_CLEAR(clear_module_state->__pyx_kp_u_object_hook_must_be_a_callable);
  Py_CLEAR(clear_module_state->__pyx_n_s_object_pairs_hook);
  Py_CLEAR(clear_module_state->__pyx_kp_u_object_pairs_hook_and_object_hoo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_object_pairs_hook_must_be_a_call);
  Py_CLEAR(clear_module_state->__pyx_n_s_off);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack_array_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack_ext_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack_map_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack_map_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_packed);
  Py_CLEAR(clear_module_state->__pyx_n_s_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_pybuff);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_raw);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_array_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_map_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_read_size_should_be_less_or_equa);
  Py_CLEAR(clear_module_state->__pyx_kp_u_recursion_limit_exceeded);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_seconds);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_skip);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_strict_map_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_strict_types);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_tell);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_timestamp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_timestamp_must_be_0_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_timezone);
  Py_CLEAR(clear_module_state->__pyx_n_s_typecode);
  Py_CLEAR(clear_module_state->__pyx_n_s_unicode_errors);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unicode_string_is_too_large);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpackb);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unpacker_feed_is_not_be_able_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_bin_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_single_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_utc);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_view);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1000000000);
  Py_CLEAR(clear_module_state->__pyx_k__23);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_date);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_time);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_datetime);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_timedelta);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_tzinfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_7msgpack_9_cmsgpack_Packer);
  Py_VISIT(traverse_module_state->__pyx_type_7msgpack_9_cmsgpack_Packer);
  Py_VISIT(traverse_module_state->__pyx_ptype_7msgpack_9_cmsgpack_Unpacker);
  Py_VISIT(traverse_module_state->__pyx_type_7msgpack_9_cmsgpack_Unpacker);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_BufferError);
  Py_VISIT(traverse_module_state->__pyx_n_s_BufferFull);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_decode_extended_type_with);
  Py_VISIT(traverse_module_state->__pyx_kp_u_EXT_data_is_too_large);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtType);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtraData);
  Py_VISIT(traverse_module_state->__pyx_n_s_FormatError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Integer_value_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_more_data_to_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplementedError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OutOfData);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverflowError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_getbuffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_pack_array_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_pack_ext_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_pack_map_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_pack_map_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_Packer_reset);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_StackError);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Time_zones_are_not_available_fro);
  Py_VISIT(traverse_module_state->__pyx_n_s_Timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unable_to_allocate_internal_buff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unable_to_enlarge_internal_buffe);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unpack_failed_error);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unpack_failed_incomplete_input);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_feed);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_read_array_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_read_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_read_map_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_skip);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_tell);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unpacker_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__29);
  Py_VISIT(traverse_module_state->__pyx_kp_u__30);
  Py_VISIT(traverse_module_state->__pyx_n_s__62);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_autoreset);
  Py_VISIT(traverse_module_state->__pyx_n_s_buf);
  Py_VISIT(traverse_module_state->__pyx_n_s_buf_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_bytes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_cannot_unpack_from_multi_byte_ob);
  Py_VISIT(traverse_module_state->__pyx_n_s_cerr);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_code);
  Py_VISIT(traverse_module_state->__pyx_kp_u_could_not_get_buffer_for_memoryv);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctx);
  Py_VISIT(traverse_module_state->__pyx_n_u_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_datetime);
  Py_VISIT(traverse_module_state->__pyx_n_s_default);
  Py_VISIT(traverse_module_state->__pyx_kp_u_default_must_be_a_callable);
  Py_VISIT(traverse_module_state->__pyx_n_s_default_read_extended_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dict_is_too_large);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_exceptions);
  Py_VISIT(traverse_module_state->__pyx_n_s_ext);
  Py_VISIT(traverse_module_state->__pyx_n_s_ext_hook);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ext_hook_must_be_a_callable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_failed_to_calculate_delta);
  Py_VISIT(traverse_module_state->__pyx_n_s_feed);
  Py_VISIT(traverse_module_state->__pyx_n_s_file_like);
  Py_VISIT(traverse_module_state->__pyx_kp_u_file_like_read_must_be_a_callab);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getbuffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_kp_u_internal_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_hook);
  Py_VISIT(traverse_module_state->__pyx_kp_u_list_hook_must_be_a_callable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_list_is_too_large);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_array_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_bin_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_buffer_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_ext_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_map_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_str_len);
  Py_VISIT(traverse_module_state->__pyx_kp_u_memoryview_is_too_large);
  Py_VISIT(traverse_module_state->__pyx_n_s_msgpack__cmsgpack);
  Py_VISIT(traverse_module_state->__pyx_kp_s_msgpack__packer_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_s_msgpack__unpacker_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nanoseconds);
  Py_VISIT(traverse_module_state->__pyx_n_s_nbytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_next_bytes);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_nread);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_object_hook);
  Py_VISIT(traverse_module_state->__pyx_kp_u_object_hook_must_be_a_callable);
  Py_VISIT(traverse_module_state->__pyx_n_s_object_pairs_hook);
  Py_VISIT(traverse_module_state->__pyx_kp_u_object_pairs_hook_and_object_hoo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_object_pairs_hook_must_be_a_call);
  Py_VISIT(traverse_module_state->__pyx_n_s_off);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack_array_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack_ext_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack_map_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack_map_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_packed);
  Py_VISIT(traverse_module_state->__pyx_n_s_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_pybuff);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_raw);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_array_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_map_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_read_size_should_be_less_or_equa);
  Py_VISIT(traverse_module_state->__pyx_kp_u_recursion_limit_exceeded);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_seconds);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_skip);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_strict_map_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_strict_types);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_tell);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_timestamp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_timestamp_must_be_0_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_timezone);
  Py_VISIT(traverse_module_state->__pyx_n_s_typecode);
  Py_VISIT(traverse_module_state->__pyx_n_s_unicode_errors);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unicode_string_is_too_large);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpackb);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unpacker_feed_is_not_be_able_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_bin_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_single_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_utc);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_view);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1000000000);
  Py_VISIT(traverse_module_state->__pyx_k__23);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_8datetime_date __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_date
#define __pyx_ptype_7cpython_8datetime_time __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_time
#define __pyx_ptype_7cpython_8datetime_datetime __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_datetime
#define __pyx_ptype_7cpython_8datetime_timedelta __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_timedelta
#define __pyx_ptype_7cpython_8datetime_tzinfo __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_tzinfo
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_7msgpack_9_cmsgpack_Packer __pyx_mstate_global->__pyx_type_7msgpack_9_cmsgpack_Packer
#define __pyx_type_7msgpack_9_cmsgpack_Unpacker __pyx_mstate_global->__pyx_type_7msgpack_9_cmsgpack_Unpacker
#endif
#define __pyx_ptype_7msgpack_9_cmsgpack_Packer __pyx_mstate_global->__pyx_ptype_7msgpack_9_cmsgpack_Packer
#define __pyx_ptype_7msgpack_9_cmsgpack_Unpacker __pyx_mstate_global->__pyx_ptype_7msgpack_9_cmsgpack_Unpacker
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_BufferError __pyx_mstate_global->__pyx_n_s_BufferError
#define __pyx_n_s_BufferFull __pyx_mstate_global->__pyx_n_s_BufferFull
#define __pyx_kp_u_Cannot_decode_extended_type_with __pyx_mstate_global->__pyx_kp_u_Cannot_decode_extended_type_with
#define __pyx_kp_u_EXT_data_is_too_large __pyx_mstate_global->__pyx_kp_u_EXT_data_is_too_large
#define __pyx_n_s_ExtType __pyx_mstate_global->__pyx_n_s_ExtType
#define __pyx_n_s_ExtraData __pyx_mstate_global->__pyx_n_s_ExtraData
#define __pyx_n_s_FormatError __pyx_mstate_global->__pyx_n_s_FormatError
#define __pyx_kp_u_Integer_value_out_of_range __pyx_mstate_global->__pyx_kp_u_Integer_value_out_of_range
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_u_No_more_data_to_unpack __pyx_mstate_global->__pyx_kp_u_No_more_data_to_unpack
#define __pyx_n_s_NotImplementedError __pyx_mstate_global->__pyx_n_s_NotImplementedError
#define __pyx_n_s_OutOfData __pyx_mstate_global->__pyx_n_s_OutOfData
#define __pyx_n_s_OverflowError __pyx_mstate_global->__pyx_n_s_OverflowError
#define __pyx_n_s_Packer __pyx_mstate_global->__pyx_n_s_Packer
#define __pyx_n_s_Packer___reduce_cython __pyx_mstate_global->__pyx_n_s_Packer___reduce_cython
#define __pyx_n_s_Packer___setstate_cython __pyx_mstate_global->__pyx_n_s_Packer___setstate_cython
#define __pyx_n_s_Packer_bytes __pyx_mstate_global->__pyx_n_s_Packer_bytes
#define __pyx_n_s_Packer_getbuffer __pyx_mstate_global->__pyx_n_s_Packer_getbuffer
#define __pyx_n_s_Packer_pack __pyx_mstate_global->__pyx_n_s_Packer_pack
#define __pyx_n_s_Packer_pack_array_header __pyx_mstate_global->__pyx_n_s_Packer_pack_array_header
#define __pyx_n_s_Packer_pack_ext_type __pyx_mstate_global->__pyx_n_s_Packer_pack_ext_type
#define __pyx_n_s_Packer_pack_map_header __pyx_mstate_global->__pyx_n_s_Packer_pack_map_header
#define __pyx_n_s_Packer_pack_map_pairs __pyx_mstate_global->__pyx_n_s_Packer_pack_map_pairs
#define __pyx_n_s_Packer_reset __pyx_mstate_global->__pyx_n_s_Packer_reset
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_StackError __pyx_mstate_global->__pyx_n_s_StackError
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_kp_u_Time_zones_are_not_available_fro __pyx_mstate_global->__pyx_kp_u_Time_zones_are_not_available_fro
#define __pyx_n_s_Timestamp __pyx_mstate_global->__pyx_n_s_Timestamp
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_Unable_to_allocate_internal_buff __pyx_mstate_global->__pyx_kp_u_Unable_to_allocate_internal_buff
#define __pyx_kp_u_Unable_to_enlarge_internal_buffe __pyx_mstate_global->__pyx_kp_u_Unable_to_enlarge_internal_buffe
#define __pyx_kp_u_Unpack_failed_error __pyx_mstate_global->__pyx_kp_u_Unpack_failed_error
#define __pyx_kp_u_Unpack_failed_incomplete_input __pyx_mstate_global->__pyx_kp_u_Unpack_failed_incomplete_input
#define __pyx_n_s_Unpacker __pyx_mstate_global->__pyx_n_s_Unpacker
#define __pyx_n_s_Unpacker___reduce_cython __pyx_mstate_global->__pyx_n_s_Unpacker___reduce_cython
#define __pyx_n_s_Unpacker___setstate_cython __pyx_mstate_global->__pyx_n_s_Unpacker___setstate_cython
#define __pyx_n_s_Unpacker_feed __pyx_mstate_global->__pyx_n_s_Unpacker_feed
#define __pyx_n_s_Unpacker_read_array_header __pyx_mstate_global->__pyx_n_s_Unpacker_read_array_header
#define __pyx_n_s_Unpacker_read_bytes __pyx_mstate_global->__pyx_n_s_Unpacker_read_bytes
#define __pyx_n_s_Unpacker_read_map_header __pyx_mstate_global->__pyx_n_s_Unpacker_read_map_header
#define __pyx_n_s_Unpacker_skip __pyx_mstate_global->__pyx_n_s_Unpacker_skip
#define __pyx_n_s_Unpacker_tell __pyx_mstate_global->__pyx_n_s_Unpacker_tell
#define __pyx_n_s_Unpacker_unpack __pyx_mstate_global->__pyx_n_s_Unpacker_unpack
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__29 __pyx_mstate_global->__pyx_n_s__29
#define __pyx_kp_u__30 __pyx_mstate_global->__pyx_kp_u__30
#define __pyx_n_s__62 __pyx_mstate_global->__pyx_n_s__62
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_autoreset __pyx_mstate_global->__pyx_n_s_autoreset
#define __pyx_n_s_buf __pyx_mstate_global->__pyx_n_s_buf
#define __pyx_n_s_buf_len __pyx_mstate_global->__pyx_n_s_buf_len
#define __pyx_n_s_bytes __pyx_mstate_global->__pyx_n_s_bytes
#define __pyx_kp_u_cannot_unpack_from_multi_byte_ob __pyx_mstate_global->__pyx_kp_u_cannot_unpack_from_multi_byte_ob
#define __pyx_n_s_cerr __pyx_mstate_global->__pyx_n_s_cerr
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_code __pyx_mstate_global->__pyx_n_s_code
#define __pyx_kp_u_could_not_get_buffer_for_memoryv __pyx_mstate_global->__pyx_kp_u_could_not_get_buffer_for_memoryv
#define __pyx_n_s_ctx __pyx_mstate_global->__pyx_n_s_ctx
#define __pyx_n_u_d __pyx_mstate_global->__pyx_n_u_d
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_datetime __pyx_mstate_global->__pyx_n_s_datetime
#define __pyx_n_s_default __pyx_mstate_global->__pyx_n_s_default
#define __pyx_kp_u_default_must_be_a_callable __pyx_mstate_global->__pyx_kp_u_default_must_be_a_callable
#define __pyx_n_s_default_read_extended_type __pyx_mstate_global->__pyx_n_s_default_read_extended_type
#define __pyx_kp_u_dict_is_too_large __pyx_mstate_global->__pyx_kp_u_dict_is_too_large
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_exceptions __pyx_mstate_global->__pyx_n_s_exceptions
#define __pyx_n_s_ext __pyx_mstate_global->__pyx_n_s_ext
#define __pyx_n_s_ext_hook __pyx_mstate_global->__pyx_n_s_ext_hook
#define __pyx_kp_u_ext_hook_must_be_a_callable __pyx_mstate_global->__pyx_kp_u_ext_hook_must_be_a_callable
#define __pyx_kp_u_failed_to_calculate_delta __pyx_mstate_global->__pyx_kp_u_failed_to_calculate_delta
#define __pyx_n_s_feed __pyx_mstate_global->__pyx_n_s_feed
#define __pyx_n_s_file_like __pyx_mstate_global->__pyx_n_s_file_like
#define __pyx_kp_u_file_like_read_must_be_a_callab __pyx_mstate_global->__pyx_kp_u_file_like_read_must_be_a_callab
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getbuffer __pyx_mstate_global->__pyx_n_s_getbuffer
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_kp_u_internal_error __pyx_mstate_global->__pyx_kp_u_internal_error
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_list_hook __pyx_mstate_global->__pyx_n_s_list_hook
#define __pyx_kp_u_list_hook_must_be_a_callable __pyx_mstate_global->__pyx_kp_u_list_hook_must_be_a_callable
#define __pyx_kp_u_list_is_too_large __pyx_mstate_global->__pyx_kp_u_list_is_too_large
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max_array_len __pyx_mstate_global->__pyx_n_s_max_array_len
#define __pyx_n_s_max_bin_len __pyx_mstate_global->__pyx_n_s_max_bin_len
#define __pyx_n_s_max_buffer_size __pyx_mstate_global->__pyx_n_s_max_buffer_size
#define __pyx_n_s_max_ext_len __pyx_mstate_global->__pyx_n_s_max_ext_len
#define __pyx_n_s_max_map_len __pyx_mstate_global->__pyx_n_s_max_map_len
#define __pyx_n_s_max_str_len __pyx_mstate_global->__pyx_n_s_max_str_len
#define __pyx_kp_u_memoryview_is_too_large __pyx_mstate_global->__pyx_kp_u_memoryview_is_too_large
#define __pyx_n_s_msgpack__cmsgpack __pyx_mstate_global->__pyx_n_s_msgpack__cmsgpack
#define __pyx_kp_s_msgpack__packer_pyx __pyx_mstate_global->__pyx_kp_s_msgpack__packer_pyx
#define __pyx_kp_s_msgpack__unpacker_pyx __pyx_mstate_global->__pyx_kp_s_msgpack__unpacker_pyx
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nanoseconds __pyx_mstate_global->__pyx_n_s_nanoseconds
#define __pyx_n_s_nbytes __pyx_mstate_global->__pyx_n_s_nbytes
#define __pyx_n_s_next_bytes __pyx_mstate_global->__pyx_n_s_next_bytes
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_nread __pyx_mstate_global->__pyx_n_s_nread
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_object_hook __pyx_mstate_global->__pyx_n_s_object_hook
#define __pyx_kp_u_object_hook_must_be_a_callable __pyx_mstate_global->__pyx_kp_u_object_hook_must_be_a_callable
#define __pyx_n_s_object_pairs_hook __pyx_mstate_global->__pyx_n_s_object_pairs_hook
#define __pyx_kp_u_object_pairs_hook_and_object_hoo __pyx_mstate_global->__pyx_kp_u_object_pairs_hook_and_object_hoo
#define __pyx_kp_u_object_pairs_hook_must_be_a_call __pyx_mstate_global->__pyx_kp_u_object_pairs_hook_must_be_a_call
#define __pyx_n_s_off __pyx_mstate_global->__pyx_n_s_off
#define __pyx_n_s_pack __pyx_mstate_global->__pyx_n_s_pack
#define __pyx_n_s_pack_array_header __pyx_mstate_global->__pyx_n_s_pack_array_header
#define __pyx_n_s_pack_ext_type __pyx_mstate_global->__pyx_n_s_pack_ext_type
#define __pyx_n_s_pack_map_header __pyx_mstate_global->__pyx_n_s_pack_map_header
#define __pyx_n_s_pack_map_pairs __pyx_mstate_global->__pyx_n_s_pack_map_pairs
#define __pyx_n_s_packed __pyx_mstate_global->__pyx_n_s_packed
#define __pyx_n_s_pairs __pyx_mstate_global->__pyx_n_s_pairs
#define __pyx_n_s_pybuff __pyx_mstate_global->__pyx_n_s_pybuff
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_raw __pyx_mstate_global->__pyx_n_s_raw
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_read_array_header __pyx_mstate_global->__pyx_n_s_read_array_header
#define __pyx_n_s_read_bytes __pyx_mstate_global->__pyx_n_s_read_bytes
#define __pyx_n_s_read_map_header __pyx_mstate_global->__pyx_n_s_read_map_header
#define __pyx_n_s_read_size __pyx_mstate_global->__pyx_n_s_read_size
#define __pyx_kp_u_read_size_should_be_less_or_equa __pyx_mstate_global->__pyx_kp_u_read_size_should_be_less_or_equa
#define __pyx_kp_u_recursion_limit_exceeded __pyx_mstate_global->__pyx_kp_u_recursion_limit_exceeded
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_reset __pyx_mstate_global->__pyx_n_s_reset
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_seconds __pyx_mstate_global->__pyx_n_s_seconds
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_skip __pyx_mstate_global->__pyx_n_s_skip
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_strict_map_key __pyx_mstate_global->__pyx_n_s_strict_map_key
#define __pyx_n_s_strict_types __pyx_mstate_global->__pyx_n_s_strict_types
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_tell __pyx_mstate_global->__pyx_n_s_tell
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_timestamp __pyx_mstate_global->__pyx_n_s_timestamp
#define __pyx_kp_u_timestamp_must_be_0_3 __pyx_mstate_global->__pyx_kp_u_timestamp_must_be_0_3
#define __pyx_n_s_timezone __pyx_mstate_global->__pyx_n_s_timezone
#define __pyx_n_s_typecode __pyx_mstate_global->__pyx_n_s_typecode
#define __pyx_n_s_unicode_errors __pyx_mstate_global->__pyx_n_s_unicode_errors
#define __pyx_kp_u_unicode_string_is_too_large __pyx_mstate_global->__pyx_kp_u_unicode_string_is_too_large
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_unpackb __pyx_mstate_global->__pyx_n_s_unpackb
#define __pyx_kp_u_unpacker_feed_is_not_be_able_to __pyx_mstate_global->__pyx_kp_u_unpacker_feed_is_not_be_able_to
#define __pyx_n_s_use_bin_type __pyx_mstate_global->__pyx_n_s_use_bin_type
#define __pyx_n_s_use_list __pyx_mstate_global->__pyx_n_s_use_list
#define __pyx_n_s_use_single_float __pyx_mstate_global->__pyx_n_s_use_single_float
#define __pyx_n_s_utc __pyx_mstate_global->__pyx_n_s_utc
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_view __pyx_mstate_global->__pyx_n_s_view
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1000000000 __pyx_mstate_global->__pyx_int_1000000000
#define __pyx_k__4 __pyx_mstate_global->__pyx_k__4
#define __pyx_k__23 __pyx_mstate_global->__pyx_k__23
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
/* #### Code section: module_code ### */

/* "cpython/datetime.pxd":72
 *     ctypedef extern class datetime.date[object PyDateTime_Date]:
 *         @property
 *         cdef inline int year(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_4year_year(PyDateTime_Date *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("year", 0);

  /* "cpython/datetime.pxd":73
 *         @property
 *         cdef inline int year(self):
 *             return PyDateTime_GET_YEAR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_GET_YEAR(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":72
 *     ctypedef extern class datetime.date[object PyDateTime_Date]:
 *         @property
 *         cdef inline int year(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":76
 * 
 *         @property
 *         cdef inline int month(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_5month_month(PyDateTime_Date *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("month", 0);

  /* "cpython/datetime.pxd":77
 *         @property
 *         cdef inline int month(self):
 *             return PyDateTime_GET_MONTH(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_GET_MONTH(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":76
 * 
 *         @property
 *         cdef inline int month(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":80
 * 
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_3day_day(PyDateTime_Date *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("day", 0);

  /* "cpython/datetime.pxd":81
 *         @property
 *         cdef inline int day(self):
 *             return PyDateTime_GET_DAY(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 */
  __pyx_r = PyDateTime_GET_DAY(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":80
 * 
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":85
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 *         @property
 *         cdef inline int hour(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_HOUR(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4hour_hour(PyDateTime_Time *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hour", 0);

  /* "cpython/datetime.pxd":86
 *         @property
 *         cdef inline int hour(self):
 *             return PyDateTime_TIME_GET_HOUR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_TIME_GET_HOUR(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":85
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 *         @property
 *         cdef inline int hour(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_HOUR(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":89
 * 
 *         @property
 *         cdef inline int minute(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MINUTE(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6minute_minute(PyDateTime_Time *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minute", 0);

  /* "cpython/datetime.pxd":90
 *         @property
 *         cdef inline int minute(self):
 *             return PyDateTime_TIME_GET_MINUTE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_TIME_GET_MINUTE(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":89
 * 
 *         @property
 *         cdef inline int minute(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MINUTE(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":93
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_SECOND(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6second_second(PyDateTime_Time *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("second", 0);

  /* "cpython/datetime.pxd":94
 *         @property
 *         cdef inline int second(self):
 *             return PyDateTime_TIME_GET_SECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_TIME_GET_SECOND(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":93
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_SECOND(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":97
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MICROSECOND(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_11microsecond_microsecond(PyDateTime_Time *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("microsecond", 0);

  /* "cpython/datetime.pxd":98
 *         @property
 *         cdef inline int microsecond(self):
 *             return PyDateTime_TIME_GET_MICROSECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_TIME_GET_MICROSECOND(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":97
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MICROSECOND(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":101
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_4time_6tzinfo_tzinfo(PyDateTime_Time *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("tzinfo", 0);

  /* "cpython/datetime.pxd":102
 *         @property
 *         cdef inline object tzinfo(self):
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTime_TIME_GET_TZINFO(((PyObject *)__pyx_v_self));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":101
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":105
 * 
 *         @property
 *         cdef inline int fold(self):             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4fold_fold(PyDateTime_Time *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fold", 0);

  /* "cpython/datetime.pxd":107
 *         cdef inline int fold(self):
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 */
  __pyx_r = PyDateTime_TIME_GET_FOLD(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":105
 * 
 *         @property
 *         cdef inline int fold(self):             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":111
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 *         @property
 *         cdef inline int year(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4year_year(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("year", 0);

  /* "cpython/datetime.pxd":112
 *         @property
 *         cdef inline int year(self):
 *             return PyDateTime_GET_YEAR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_GET_YEAR(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":111
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 *         @property
 *         cdef inline int year(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":115
 * 
 *         @property
 *         cdef inline int month(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_5month_month(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("month", 0);

  /* "cpython/datetime.pxd":116
 *         @property
 *         cdef inline int month(self):
 *             return PyDateTime_GET_MONTH(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_GET_MONTH(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":115
 * 
 *         @property
 *         cdef inline int month(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":119
 * 
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_3day_day(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("day", 0);

  /* "cpython/datetime.pxd":120
 *         @property
 *         cdef inline int day(self):
 *             return PyDateTime_GET_DAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_GET_DAY(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":119
 * 
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":123
 * 
 *         @property
 *         cdef inline int hour(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_HOUR(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4hour_hour(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hour", 0);

  /* "cpython/datetime.pxd":124
 *         @property
 *         cdef inline int hour(self):
 *             return PyDateTime_DATE_GET_HOUR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DATE_GET_HOUR(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":123
 * 
 *         @property
 *         cdef inline int hour(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_HOUR(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":127
 * 
 *         @property
 *         cdef inline int minute(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MINUTE(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6minute_minute(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minute", 0);

  /* "cpython/datetime.pxd":128
 *         @property
 *         cdef inline int minute(self):
 *             return PyDateTime_DATE_GET_MINUTE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DATE_GET_MINUTE(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":127
 * 
 *         @property
 *         cdef inline int minute(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MINUTE(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":131
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_SECOND(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6second_second(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("second", 0);

  /* "cpython/datetime.pxd":132
 *         @property
 *         cdef inline int second(self):
 *             return PyDateTime_DATE_GET_SECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DATE_GET_SECOND(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":131
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_SECOND(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":135
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MICROSECOND(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_11microsecond_microsecond(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("microsecond", 0);

  /* "cpython/datetime.pxd":136
 *         @property
 *         cdef inline int microsecond(self):
 *             return PyDateTime_DATE_GET_MICROSECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DATE_GET_MICROSECOND(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":135
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MICROSECOND(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":139
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_8datetime_6tzinfo_tzinfo(PyDateTime_DateTime *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("tzinfo", 0);

  /* "cpython/datetime.pxd":140
 *         @property
 *         cdef inline object tzinfo(self):
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTime_DATE_GET_TZINFO(((PyObject *)__pyx_v_self));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":139
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":143
 * 
 *         @property
 *         cdef inline int fold(self):             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4fold_fold(PyDateTime_DateTime *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fold", 0);

  /* "cpython/datetime.pxd":145
 *         cdef inline int fold(self):
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 */
  __pyx_r = PyDateTime_DATE_GET_FOLD(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":143
 * 
 *         @property
 *         cdef inline int fold(self):             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":149
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_DAYS(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_3day_day(PyDateTime_Delta *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("day", 0);

  /* "cpython/datetime.pxd":150
 *         @property
 *         cdef inline int day(self):
 *             return PyDateTime_DELTA_GET_DAYS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DELTA_GET_DAYS(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":149
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 *         @property
 *         cdef inline int day(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_DAYS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":153
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_SECONDS(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_6second_second(PyDateTime_Delta *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("second", 0);

  /* "cpython/datetime.pxd":154
 *         @property
 *         cdef inline int second(self):
 *             return PyDateTime_DELTA_GET_SECONDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDateTime_DELTA_GET_SECONDS(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":153
 * 
 *         @property
 *         cdef inline int second(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_SECONDS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":157
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_11microsecond_microsecond(PyDateTime_Delta *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("microsecond", 0);

  /* "cpython/datetime.pxd":158
 *         @property
 *         cdef inline int microsecond(self):
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.tzinfo[object PyDateTime_TZInfo]:
 */
  __pyx_r = PyDateTime_DELTA_GET_MICROSECONDS(((PyObject *)__pyx_v_self));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":157
 * 
 *         @property
 *         cdef inline int microsecond(self):             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":282
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

static CYTHON_INLINE void __pyx_f_7cpython_8datetime_import_datetime(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("import_datetime", 0);

  /* "cpython/datetime.pxd":283
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():
 *     PyDateTime_IMPORT             # <<<<<<<<<<<<<<
 * 
 * # Create date object using DateTime CAPI factory function.
 */
  (void)(PyDateTime_IMPORT);

  /* "cpython/datetime.pxd":282
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpython/datetime.pxd":287
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

static CYTHON_INLINE PyDateTime_Date *__pyx_f_7cpython_8datetime_date_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day) {
  PyDateTime_Date *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("date_new", 0);

  /* "cpython/datetime.pxd":288
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)             # <<<<<<<<<<<<<<
 * 
 * # Create time object using DateTime CAPI factory function
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)PyDateTimeAPI->Date_FromDate(__pyx_v_year, __pyx_v_month, __pyx_v_day, PyDateTimeAPI->DateType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyDateTime_Date *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":287
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.date_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */

static CYTHON_INLINE PyDateTime_Time *__pyx_f_7cpython_8datetime_time_new(int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz, struct __pyx_opt_args_7cpython_8datetime_time_new *__pyx_optional_args) {
  int __pyx_v_fold = ((int)0);
  PyDateTime_Time *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("time_new", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_fold = __pyx_optional_args->fold;
    }
  }

  /* "cpython/datetime.pxd":293
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             # <<<<<<<<<<<<<<
 * 
 * # Create datetime object using DateTime CAPI factory function.
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)__Pyx_DateTime_TimeWithFold(__pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, __pyx_v_fold)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cpython_8datetime_time))))) __PYX_ERR(2, 293, __pyx_L1_error)
  __pyx_r = ((PyDateTime_Time *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.time_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */

static CYTHON_INLINE PyDateTime_DateTime *__pyx_f_7cpython_8datetime_datetime_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day, int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz, struct __pyx_opt_args_7cpython_8datetime_datetime_new *__pyx_optional_args) {
  int __pyx_v_fold = ((int)0);
  PyDateTime_DateTime *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("datetime_new", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_fold = __pyx_optional_args->fold;
    }
  }

  /* "cpython/datetime.pxd":298
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             # <<<<<<<<<<<<<<
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)__Pyx_DateTime_DateTimeWithFold(__pyx_v_year, __pyx_v_month, __pyx_v_day, __pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, __pyx_v_fold)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyDateTime_DateTime *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.datetime_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":302
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

static CYTHON_INLINE PyDateTime_Delta *__pyx_f_7cpython_8datetime_timedelta_new(int __pyx_v_days, int __pyx_v_seconds, int __pyx_v_useconds) {
  PyDateTime_Delta *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timedelta_new", 0);

  /* "cpython/datetime.pxd":303
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)             # <<<<<<<<<<<<<<
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)PyDateTimeAPI->Delta_FromDelta(__pyx_v_days, __pyx_v_seconds, __pyx_v_useconds, 1, PyDateTimeAPI->DeltaType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyDateTime_Delta *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":302
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.timedelta_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_timezone_new(PyObject *__pyx_v_offset, struct __pyx_opt_args_7cpython_8datetime_timezone_new *__pyx_optional_args) {
  PyObject *__pyx_v_name = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timezone_new", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_name = __pyx_optional_args->name;
    }
  }

  /* "cpython/datetime.pxd":307
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 */
  __pyx_t_1 = (PY_VERSION_HEX < 0x030700b1);
  if (unlikely(__pyx_t_1)) {

    /* "cpython/datetime.pxd":308
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')             # <<<<<<<<<<<<<<
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 308, __pyx_L1_error)

    /* "cpython/datetime.pxd":307
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 */
  }

  /* "cpython/datetime.pxd":309
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 * # Create datetime object using DB API constructor.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_name != Py_None);
  if (__pyx_t_1) {
    __pyx_t_3 = ((PyObject *)__pyx_v_name);
  } else {
    __pyx_t_3 = NULL;
  }
  __pyx_t_2 = __Pyx_TimeZone_FromOffsetAndName(__pyx_v_offset, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.datetime.timezone_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */

static CYTHON_INLINE PyDateTime_DateTime *__pyx_f_7cpython_8datetime_datetime_from_timestamp(PyObject *__pyx_v_timestamp, struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp *__pyx_optional_args) {
  PyObject *__pyx_v_tz = ((PyObject *)Py_None);
  PyDateTime_DateTime *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("datetime_from_timestamp", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_tz = __pyx_optional_args->tz;
    }
  }

  /* "cpython/datetime.pxd":313
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(             # <<<<<<<<<<<<<<
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 * 
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);

  /* "cpython/datetime.pxd":314
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)             # <<<<<<<<<<<<<<
 * 
 * # Create date object using DB API constructor.
 */
  __pyx_t_2 = (__pyx_v_tz != Py_None);
  if (__pyx_t_2) {
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_timestamp);
    __Pyx_GIVEREF(__pyx_v_timestamp);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_timestamp)) __PYX_ERR(2, 314, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_tz);
    __Pyx_GIVEREF(__pyx_v_tz);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_tz)) __PYX_ERR(2, 314, __pyx_L1_error);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_timestamp);
    __Pyx_GIVEREF(__pyx_v_timestamp);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_timestamp)) __PYX_ERR(2, 314, __pyx_L1_error);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "cpython/datetime.pxd":313
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(             # <<<<<<<<<<<<<<
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 * 
 */
  __pyx_t_3 = ((PyObject *)PyDateTimeAPI->DateTime_FromTimestamp(((PyObject *)PyDateTimeAPI->DateTimeType), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyDateTime_DateTime *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.datetime.datetime_from_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":317
 * 
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))
 * 
 */

static CYTHON_INLINE PyDateTime_Date *__pyx_f_7cpython_8datetime_date_from_timestamp(PyObject *__pyx_v_timestamp) {
  PyDateTime_Date *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("date_from_timestamp", 0);

  /* "cpython/datetime.pxd":318
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))             # <<<<<<<<<<<<<<
 * 
 * # More recognizable getters for date/time/datetime/timedelta.
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_timestamp);
  __Pyx_GIVEREF(__pyx_v_timestamp);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_timestamp)) __PYX_ERR(2, 318, __pyx_L1_error);
  __pyx_t_2 = ((PyObject *)PyDateTimeAPI->Date_FromTimestamp(((PyObject *)PyDateTimeAPI->DateType), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyDateTime_Date *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":317
 * 
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.datetime.date_from_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":326
 * 
 * # Get UTC singleton
 * cdef inline object get_utc():             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_get_utc(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_utc", 0);

  /* "cpython/datetime.pxd":327
 * # Get UTC singleton
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC
 */
  __pyx_t_1 = (PY_VERSION_HEX < 0x030700b1);
  if (unlikely(__pyx_t_1)) {

    /* "cpython/datetime.pxd":328
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')             # <<<<<<<<<<<<<<
 *     return <object>__Pyx_TimeZone_UTC
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 328, __pyx_L1_error)

    /* "cpython/datetime.pxd":327
 * # Get UTC singleton
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC
 */
  }

  /* "cpython/datetime.pxd":329
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC             # <<<<<<<<<<<<<<
 * 
 * # Get tzinfo of time
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__Pyx_TimeZone_UTC));
  __pyx_r = ((PyObject *)__Pyx_TimeZone_UTC);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":326
 * 
 * # Get UTC singleton
 * cdef inline object get_utc():             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.datetime.get_utc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":332
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_time_tzinfo(PyObject *__pyx_v_o) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("time_tzinfo", 0);

  /* "cpython/datetime.pxd":333
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)             # <<<<<<<<<<<<<<
 * 
 * # Get tzinfo of datetime
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTime_TIME_GET_TZINFO(__pyx_v_o);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":332
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":336
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_datetime_tzinfo(PyObject *__pyx_v_o) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("datetime_tzinfo", 0);

  /* "cpython/datetime.pxd":337
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)             # <<<<<<<<<<<<<<
 * 
 * # Get year of date
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTime_DATE_GET_TZINFO(__pyx_v_o);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":336
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":340
 * 
 * # Get year of date
 * cdef inline int date_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_year(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_year", 0);

  /* "cpython/datetime.pxd":341
 * # Get year of date
 * cdef inline int date_year(object o):
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of date
 */
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":340
 * 
 * # Get year of date
 * cdef inline int date_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":344
 * 
 * # Get month of date
 * cdef inline int date_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_month(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_month", 0);

  /* "cpython/datetime.pxd":345
 * # Get month of date
 * cdef inline int date_month(object o):
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of date
 */
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":344
 * 
 * # Get month of date
 * cdef inline int date_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":348
 * 
 * # Get day of date
 * cdef inline int date_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_day(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_day", 0);

  /* "cpython/datetime.pxd":349
 * # Get day of date
 * cdef inline int date_day(object o):
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get year of datetime
 */
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":348
 * 
 * # Get day of date
 * cdef inline int date_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":352
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_year(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_year", 0);

  /* "cpython/datetime.pxd":353
 * # Get year of datetime
 * cdef inline int datetime_year(object o):
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of datetime
 */
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":352
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":356
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_month(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_month", 0);

  /* "cpython/datetime.pxd":357
 * # Get month of datetime
 * cdef inline int datetime_month(object o):
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of datetime
 */
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":356
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":360
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_day(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_day", 0);

  /* "cpython/datetime.pxd":361
 * # Get day of datetime
 * cdef inline int datetime_day(object o):
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of time
 */
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":360
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":364
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_hour(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_hour", 0);

  /* "cpython/datetime.pxd":365
 * # Get hour of time
 * cdef inline int time_hour(object o):
 *     return PyDateTime_TIME_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of time
 */
  __pyx_r = PyDateTime_TIME_GET_HOUR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":364
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":368
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_minute(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_minute", 0);

  /* "cpython/datetime.pxd":369
 * # Get minute of time
 * cdef inline int time_minute(object o):
 *     return PyDateTime_TIME_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of time
 */
  __pyx_r = PyDateTime_TIME_GET_MINUTE(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":368
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":372
 * 
 * # Get second of time
 * cdef inline int time_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_second(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_second", 0);

  /* "cpython/datetime.pxd":373
 * # Get second of time
 * cdef inline int time_second(object o):
 *     return PyDateTime_TIME_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of time
 */
  __pyx_r = PyDateTime_TIME_GET_SECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":372
 * 
 * # Get second of time
 * cdef inline int time_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":376
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_microsecond(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_microsecond", 0);

  /* "cpython/datetime.pxd":377
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):
 *     return PyDateTime_TIME_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get fold of time
 */
  __pyx_r = PyDateTime_TIME_GET_MICROSECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":376
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":380
 * 
 * # Get fold of time
 * cdef inline int time_fold(object o):             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_fold(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_fold", 0);

  /* "cpython/datetime.pxd":382
 * cdef inline int time_fold(object o):
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of datetime
 */
  __pyx_r = PyDateTime_TIME_GET_FOLD(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":380
 * 
 * # Get fold of time
 * cdef inline int time_fold(object o):             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":385
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_hour(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_hour", 0);

  /* "cpython/datetime.pxd":386
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):
 *     return PyDateTime_DATE_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_HOUR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":385
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":389
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_minute(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_minute", 0);

  /* "cpython/datetime.pxd":390
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):
 *     return PyDateTime_DATE_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_MINUTE(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":389
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":393
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_second(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_second", 0);

  /* "cpython/datetime.pxd":394
 * # Get second of datetime
 * cdef inline int datetime_second(object o):
 *     return PyDateTime_DATE_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_SECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":393
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":397
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_microsecond(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_microsecond", 0);

  /* "cpython/datetime.pxd":398
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):
 *     return PyDateTime_DATE_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get fold of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_MICROSECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":397
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":401
 * 
 * # Get fold of datetime
 * cdef inline int datetime_fold(object o):             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_fold(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_fold", 0);

  /* "cpython/datetime.pxd":403
 * cdef inline int datetime_fold(object o):
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)             # <<<<<<<<<<<<<<
 * 
 * # Get days of timedelta
 */
  __pyx_r = PyDateTime_DATE_GET_FOLD(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":401
 * 
 * # Get fold of datetime
 * cdef inline int datetime_fold(object o):             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":406
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_days(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_days", 0);

  /* "cpython/datetime.pxd":407
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):
 *     return (<PyDateTime_Delta*>o).days             # <<<<<<<<<<<<<<
 * 
 * # Get seconds of timedelta
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->days;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":406
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":410
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_seconds(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_seconds", 0);

  /* "cpython/datetime.pxd":411
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):
 *     return (<PyDateTime_Delta*>o).seconds             # <<<<<<<<<<<<<<
 * 
 * # Get microseconds of timedelta
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->seconds;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":410
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":414
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_microseconds(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_microseconds", 0);

  /* "cpython/datetime.pxd":415
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):
 *     return (<PyDateTime_Delta*>o).microseconds             # <<<<<<<<<<<<<<
 * 
 * cdef inline double total_seconds(timedelta obj):
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->microseconds;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":414
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":417
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 * cdef inline double total_seconds(timedelta obj):             # <<<<<<<<<<<<<<
 *     # Mirrors the "timedelta.total_seconds()" method.
 *     # Note that this implementation is not guaranteed to give *exactly* the same
 */

static CYTHON_INLINE double __pyx_f_7cpython_8datetime_total_seconds(PyDateTime_Delta *__pyx_v_obj) {
  double __pyx_v_days;
  double __pyx_v_seconds;
  double __pyx_v_micros;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_seconds", 0);

  /* "cpython/datetime.pxd":423
 *     cdef:
 *         double days, seconds, micros
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)             # <<<<<<<<<<<<<<
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 */
  __pyx_v_days = ((double)PyDateTime_DELTA_GET_DAYS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":424
 *         double days, seconds, micros
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)             # <<<<<<<<<<<<<<
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 *     return days * 24 * 3600 + seconds + micros / 1_000_000
 */
  __pyx_v_seconds = ((double)PyDateTime_DELTA_GET_SECONDS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":425
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)             # <<<<<<<<<<<<<<
 *     return days * 24 * 3600 + seconds + micros / 1_000_000
 */
  __pyx_v_micros = ((double)PyDateTime_DELTA_GET_MICROSECONDS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":426
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 *     return days * 24 * 3600 + seconds + micros / 1_000_000             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((((__pyx_v_days * 24.0) * 3600.0) + __pyx_v_seconds) + (__pyx_v_micros / 1000000.0));
  goto __pyx_L0;

  /* "cpython/datetime.pxd":417
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 * cdef inline double total_seconds(timedelta obj):             # <<<<<<<<<<<<<<
 *     # Mirrors the "timedelta.total_seconds()" method.
 *     # Note that this implementation is not guaranteed to give *exactly* the same
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real", 0);

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("imag", 0);

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":54
 * 
 * 
 * cdef inline int PyBytesLike_Check(object o):             # <<<<<<<<<<<<<<
 *     return PyBytes_Check(o) or PyByteArray_Check(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_Check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("PyBytesLike_Check", 0);

  /* "msgpack/_packer.pyx":55
 * 
 * cdef inline int PyBytesLike_Check(object o):
 *     return PyBytes_Check(o) or PyByteArray_Check(o)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_o);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyByteArray_Check(__pyx_v_o);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "msgpack/_packer.pyx":54
 * 
 * 
 * cdef inline int PyBytesLike_Check(object o):             # <<<<<<<<<<<<<<
 *     return PyBytes_Check(o) or PyByteArray_Check(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":58
 * 
 * 
 * cdef inline int PyBytesLike_CheckExact(object o):             # <<<<<<<<<<<<<<
 *     return PyBytes_CheckExact(o) or PyByteArray_CheckExact(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_CheckExact(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("PyBytesLike_CheckExact", 0);

  /* "msgpack/_packer.pyx":59
 * 
 * cdef inline int PyBytesLike_CheckExact(object o):
 *     return PyBytes_CheckExact(o) or PyByteArray_CheckExact(o)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyBytes_CheckExact(__pyx_v_o);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyByteArray_CheckExact(__pyx_v_o);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "msgpack/_packer.pyx":58
 * 
 * 
 * cdef inline int PyBytesLike_CheckExact(object o):             # <<<<<<<<<<<<<<
 *     return PyBytes_CheckExact(o) or PyByteArray_CheckExact(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":116
 *     cdef bint datetime
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 */

/* Python wrapper */
static int __pyx_pw_7msgpack_9_cmsgpack_6Packer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7msgpack_9_cmsgpack_6Packer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 116, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer___cinit__(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7msgpack_9_cmsgpack_6Packer___cinit__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  int __pyx_v_buf_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "msgpack/_packer.pyx":117
 * 
 *     def __cinit__(self):
 *         cdef int buf_size = 1024*1024             # <<<<<<<<<<<<<<
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 *         if self.pk.buf == NULL:
 */
  __pyx_v_buf_size = 0x100000;

  /* "msgpack/_packer.pyx":118
 *     def __cinit__(self):
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)             # <<<<<<<<<<<<<<
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 */
  __pyx_v_self->pk.buf = ((char *)PyMem_Malloc(__pyx_v_buf_size));

  /* "msgpack/_packer.pyx":119
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 *         if self.pk.buf == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size
 */
  __pyx_t_1 = (__pyx_v_self->pk.buf == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":120
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")             # <<<<<<<<<<<<<<
 *         self.pk.buf_size = buf_size
 *         self.pk.length = 0
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 120, __pyx_L1_error)

    /* "msgpack/_packer.pyx":119
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 *         if self.pk.buf == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size
 */
  }

  /* "msgpack/_packer.pyx":121
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size             # <<<<<<<<<<<<<<
 *         self.pk.length = 0
 * 
 */
  __pyx_v_self->pk.buf_size = __pyx_v_buf_size;

  /* "msgpack/_packer.pyx":122
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size
 *         self.pk.length = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *, default=None,
 */
  __pyx_v_self->pk.length = 0;

  /* "msgpack/_packer.pyx":116
 *     cdef bint datetime
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> PyMem_Malloc(buf_size)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":124
 *         self.pk.length = 0
 * 
 *     def __init__(self, *, default=None,             # <<<<<<<<<<<<<<
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 */

/* Python wrapper */
static int __pyx_pw_7msgpack_9_cmsgpack_6Packer_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7msgpack_9_cmsgpack_6Packer_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default = 0;
  int __pyx_v_use_single_float;
  int __pyx_v_autoreset;
  int __pyx_v_use_bin_type;
  int __pyx_v_strict_types;
  int __pyx_v_datetime;
  PyObject *__pyx_v_unicode_errors = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 124, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_default,&__pyx_n_s_use_single_float,&__pyx_n_s_autoreset,&__pyx_n_s_use_bin_type,&__pyx_n_s_strict_types,&__pyx_n_s_datetime,&__pyx_n_s_unicode_errors,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "msgpack/_packer.pyx":126
 *     def __init__(self, *, default=None,
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):             # <<<<<<<<<<<<<<
 *         self.use_float = use_single_float
 *         self.strict_types = strict_types
 */
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 7)) {
        Py_ssize_t index;
        for (index = 0; index < 7 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "__init__") < 0)) __PYX_ERR(0, 124, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_default = values[0];
    if (values[1]) {
      __pyx_v_use_single_float = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_use_single_float == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
    } else {

      /* "msgpack/_packer.pyx":125
 * 
 *     def __init__(self, *, default=None,
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,             # <<<<<<<<<<<<<<
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 *         self.use_float = use_single_float
 */
      __pyx_v_use_single_float = ((int)0);
    }
    if (values[2]) {
      __pyx_v_autoreset = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_autoreset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
    } else {
      __pyx_v_autoreset = ((int)1);
    }
    if (values[3]) {
      __pyx_v_use_bin_type = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_use_bin_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
    } else {
      __pyx_v_use_bin_type = ((int)1);
    }
    if (values[4]) {
      __pyx_v_strict_types = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_strict_types == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L3_error)
    } else {

      /* "msgpack/_packer.pyx":126
 *     def __init__(self, *, default=None,
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):             # <<<<<<<<<<<<<<
 *         self.use_float = use_single_float
 *         self.strict_types = strict_types
 */
      __pyx_v_strict_types = ((int)0);
    }
    if (values[5]) {
      __pyx_v_datetime = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_datetime == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L3_error)
    } else {
      __pyx_v_datetime = ((int)0);
    }
    __pyx_v_unicode_errors = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 124, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_2__init__(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_default, __pyx_v_use_single_float, __pyx_v_autoreset, __pyx_v_use_bin_type, __pyx_v_strict_types, __pyx_v_datetime, __pyx_v_unicode_errors);

  /* "msgpack/_packer.pyx":124
 *         self.pk.length = 0
 * 
 *     def __init__(self, *, default=None,             # <<<<<<<<<<<<<<
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7msgpack_9_cmsgpack_6Packer_2__init__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_default, int __pyx_v_use_single_float, int __pyx_v_autoreset, int __pyx_v_use_bin_type, int __pyx_v_strict_types, int __pyx_v_datetime, PyObject *__pyx_v_unicode_errors) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "msgpack/_packer.pyx":127
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 *         self.use_float = use_single_float             # <<<<<<<<<<<<<<
 *         self.strict_types = strict_types
 *         self.autoreset = autoreset
 */
  __pyx_v_self->use_float = __pyx_v_use_single_float;

  /* "msgpack/_packer.pyx":128
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 *         self.use_float = use_single_float
 *         self.strict_types = strict_types             # <<<<<<<<<<<<<<
 *         self.autoreset = autoreset
 *         self.datetime = datetime
 */
  __pyx_v_self->strict_types = __pyx_v_strict_types;

  /* "msgpack/_packer.pyx":129
 *         self.use_float = use_single_float
 *         self.strict_types = strict_types
 *         self.autoreset = autoreset             # <<<<<<<<<<<<<<
 *         self.datetime = datetime
 *         self.pk.use_bin_type = use_bin_type
 */
  __pyx_v_self->autoreset = __pyx_v_autoreset;

  /* "msgpack/_packer.pyx":130
 *         self.strict_types = strict_types
 *         self.autoreset = autoreset
 *         self.datetime = datetime             # <<<<<<<<<<<<<<
 *         self.pk.use_bin_type = use_bin_type
 *         if default is not None:
 */
  __pyx_v_self->datetime = __pyx_v_datetime;

  /* "msgpack/_packer.pyx":131
 *         self.autoreset = autoreset
 *         self.datetime = datetime
 *         self.pk.use_bin_type = use_bin_type             # <<<<<<<<<<<<<<
 *         if default is not None:
 *             if not PyCallable_Check(default):
 */
  __pyx_v_self->pk.use_bin_type = __pyx_v_use_bin_type;

  /* "msgpack/_packer.pyx":132
 *         self.datetime = datetime
 *         self.pk.use_bin_type = use_bin_type
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_default != Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":133
 *         self.pk.use_bin_type = use_bin_type
 *         if default is not None:
 *             if not PyCallable_Check(default):             # <<<<<<<<<<<<<<
 *                 raise TypeError("default must be a callable.")
 *         self._default = default
 */
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_default));
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_packer.pyx":134
 *         if default is not None:
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")             # <<<<<<<<<<<<<<
 *         self._default = default
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 134, __pyx_L1_error)

      /* "msgpack/_packer.pyx":133
 *         self.pk.use_bin_type = use_bin_type
 *         if default is not None:
 *             if not PyCallable_Check(default):             # <<<<<<<<<<<<<<
 *                 raise TypeError("default must be a callable.")
 *         self._default = default
 */
    }

    /* "msgpack/_packer.pyx":132
 *         self.datetime = datetime
 *         self.pk.use_bin_type = use_bin_type
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")
 */
  }

  /* "msgpack/_packer.pyx":135
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")
 *         self._default = default             # <<<<<<<<<<<<<<
 * 
 *         self._berrors = unicode_errors
 */
  __Pyx_INCREF(__pyx_v_default);
  __Pyx_GIVEREF(__pyx_v_default);
  __Pyx_GOTREF(__pyx_v_self->_default);
  __Pyx_DECREF(__pyx_v_self->_default);
  __pyx_v_self->_default = __pyx_v_default;

  /* "msgpack/_packer.pyx":137
 *         self._default = default
 * 
 *         self._berrors = unicode_errors             # <<<<<<<<<<<<<<
 *         if unicode_errors is None:
 *             self.unicode_errors = NULL
 */
  __Pyx_INCREF(__pyx_v_unicode_errors);
  __Pyx_GIVEREF(__pyx_v_unicode_errors);
  __Pyx_GOTREF(__pyx_v_self->_berrors);
  __Pyx_DECREF(__pyx_v_self->_berrors);
  __pyx_v_self->_berrors = __pyx_v_unicode_errors;

  /* "msgpack/_packer.pyx":138
 * 
 *         self._berrors = unicode_errors
 *         if unicode_errors is None:             # <<<<<<<<<<<<<<
 *             self.unicode_errors = NULL
 *         else:
 */
  __pyx_t_1 = (__pyx_v_unicode_errors == Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":139
 *         self._berrors = unicode_errors
 *         if unicode_errors is None:
 *             self.unicode_errors = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             self.unicode_errors = self._berrors
 */
    __pyx_v_self->unicode_errors = NULL;

    /* "msgpack/_packer.pyx":138
 * 
 *         self._berrors = unicode_errors
 *         if unicode_errors is None:             # <<<<<<<<<<<<<<
 *             self.unicode_errors = NULL
 *         else:
 */
    goto __pyx_L5;
  }

  /* "msgpack/_packer.pyx":141
 *             self.unicode_errors = NULL
 *         else:
 *             self.unicode_errors = self._berrors             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_self->_berrors); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
    __pyx_v_self->unicode_errors = __pyx_t_3;
  }
  __pyx_L5:;

  /* "msgpack/_packer.pyx":124
 *         self.pk.length = 0
 * 
 *     def __init__(self, *, default=None,             # <<<<<<<<<<<<<<
 *                  bint use_single_float=False, bint autoreset=True, bint use_bin_type=True,
 *                  bint strict_types=False, bint datetime=False, unicode_errors=None):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":143
 *             self.unicode_errors = self._berrors
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.pk.buf)
 *         self.pk.buf = NULL
 */

/* Python wrapper */
static void __pyx_pw_7msgpack_9_cmsgpack_6Packer_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7msgpack_9_cmsgpack_6Packer_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7msgpack_9_cmsgpack_6Packer_4__dealloc__(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7msgpack_9_cmsgpack_6Packer_4__dealloc__(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "msgpack/_packer.pyx":144
 * 
 *     def __dealloc__(self):
 *         PyMem_Free(self.pk.buf)             # <<<<<<<<<<<<<<
 *         self.pk.buf = NULL
 * 
 */
  PyMem_Free(__pyx_v_self->pk.buf);

  /* "msgpack/_packer.pyx":145
 *     def __dealloc__(self):
 *         PyMem_Free(self.pk.buf)
 *         self.pk.buf = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:
 */
  __pyx_v_self->pk.buf = NULL;

  /* "msgpack/_packer.pyx":143
 *             self.unicode_errors = self._berrors
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.pk.buf)
 *         self.pk.buf = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "msgpack/_packer.pyx":147
 *         self.pk.buf = NULL
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */

static int __pyx_f_7msgpack_9_cmsgpack_6Packer__pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_o, struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack *__pyx_optional_args) {
  int __pyx_v_nest_limit = __pyx_k__4;
  PY_LONG_LONG __pyx_v_llval;
  unsigned PY_LONG_LONG __pyx_v_ullval;
  unsigned long __pyx_v_ulval;
  long __pyx_v_longval;
  float __pyx_v_fval;
  double __pyx_v_dval;
  char *__pyx_v_rawval;
  int __pyx_v_ret;
  PyObject *__pyx_v_d = 0;
  Py_ssize_t __pyx_v_L;
  int __pyx_v_default_used;
  int __pyx_v_strict_types;
  Py_buffer __pyx_v_view;
  CYTHON_UNUSED PyObject *__pyx_v_oe = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_delta = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned PY_LONG_LONG __pyx_t_6;
  PY_LONG_LONG __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  long __pyx_t_23;
  float __pyx_t_24;
  double __pyx_t_25;
  PyObject *__pyx_t_26;
  char *__pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack __pyx_t_30;
  unsigned long __pyx_t_31;
  int __pyx_t_32;
  PyObject *(*__pyx_t_33)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_pack", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_nest_limit = __pyx_optional_args->nest_limit;
    }
  }
  __Pyx_INCREF(__pyx_v_o);

  /* "msgpack/_packer.pyx":158
 *         cdef dict d
 *         cdef Py_ssize_t L
 *         cdef int default_used = 0             # <<<<<<<<<<<<<<
 *         cdef bint strict_types = self.strict_types
 *         cdef Py_buffer view
 */
  __pyx_v_default_used = 0;

  /* "msgpack/_packer.pyx":159
 *         cdef Py_ssize_t L
 *         cdef int default_used = 0
 *         cdef bint strict_types = self.strict_types             # <<<<<<<<<<<<<<
 *         cdef Py_buffer view
 * 
 */
  __pyx_t_1 = __pyx_v_self->strict_types;
  __pyx_v_strict_types = __pyx_t_1;

  /* "msgpack/_packer.pyx":162
 *         cdef Py_buffer view
 * 
 *         if nest_limit < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("recursion limit exceeded.")
 * 
 */
  __pyx_t_1 = (__pyx_v_nest_limit < 0);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":163
 * 
 *         if nest_limit < 0:
 *             raise ValueError("recursion limit exceeded.")             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 163, __pyx_L1_error)

    /* "msgpack/_packer.pyx":162
 *         cdef Py_buffer view
 * 
 *         if nest_limit < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("recursion limit exceeded.")
 * 
 */
  }

  /* "msgpack/_packer.pyx":165
 *             raise ValueError("recursion limit exceeded.")
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if o is None:
 *                 ret = msgpack_pack_nil(&self.pk)
 */
  while (1) {

    /* "msgpack/_packer.pyx":166
 * 
 *         while True:
 *             if o is None:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_nil(&self.pk)
 *             elif o is True:
 */
    __pyx_t_1 = (__pyx_v_o == Py_None);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":167
 *         while True:
 *             if o is None:
 *                 ret = msgpack_pack_nil(&self.pk)             # <<<<<<<<<<<<<<
 *             elif o is True:
 *                 ret = msgpack_pack_true(&self.pk)
 */
      __pyx_v_ret = msgpack_pack_nil((&__pyx_v_self->pk));

      /* "msgpack/_packer.pyx":166
 * 
 *         while True:
 *             if o is None:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_nil(&self.pk)
 *             elif o is True:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":168
 *             if o is None:
 *                 ret = msgpack_pack_nil(&self.pk)
 *             elif o is True:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_true(&self.pk)
 *             elif o is False:
 */
    __pyx_t_1 = (__pyx_v_o == Py_True);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":169
 *                 ret = msgpack_pack_nil(&self.pk)
 *             elif o is True:
 *                 ret = msgpack_pack_true(&self.pk)             # <<<<<<<<<<<<<<
 *             elif o is False:
 *                 ret = msgpack_pack_false(&self.pk)
 */
      __pyx_v_ret = msgpack_pack_true((&__pyx_v_self->pk));

      /* "msgpack/_packer.pyx":168
 *             if o is None:
 *                 ret = msgpack_pack_nil(&self.pk)
 *             elif o is True:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_true(&self.pk)
 *             elif o is False:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":170
 *             elif o is True:
 *                 ret = msgpack_pack_true(&self.pk)
 *             elif o is False:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_false(&self.pk)
 *             elif PyLong_CheckExact(o) if strict_types else PyLong_Check(o):
 */
    __pyx_t_1 = (__pyx_v_o == Py_False);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":171
 *                 ret = msgpack_pack_true(&self.pk)
 *             elif o is False:
 *                 ret = msgpack_pack_false(&self.pk)             # <<<<<<<<<<<<<<
 *             elif PyLong_CheckExact(o) if strict_types else PyLong_Check(o):
 *                 # PyInt_Check(long) is True for Python 3.
 */
      __pyx_v_ret = msgpack_pack_false((&__pyx_v_self->pk));

      /* "msgpack/_packer.pyx":170
 *             elif o is True:
 *                 ret = msgpack_pack_true(&self.pk)
 *             elif o is False:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_false(&self.pk)
 *             elif PyLong_CheckExact(o) if strict_types else PyLong_Check(o):
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":172
 *             elif o is False:
 *                 ret = msgpack_pack_false(&self.pk)
 *             elif PyLong_CheckExact(o) if strict_types else PyLong_Check(o):             # <<<<<<<<<<<<<<
 *                 # PyInt_Check(long) is True for Python 3.
 *                 # So we should test long before int.
 */
    if (__pyx_v_strict_types) {
      __pyx_t_1 = PyLong_CheckExact(__pyx_v_o);
    } else {
      __pyx_t_1 = PyLong_Check(__pyx_v_o);
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":175
 *                 # PyInt_Check(long) is True for Python 3.
 *                 # So we should test long before int.
 *                 try:             # <<<<<<<<<<<<<<
 *                     if o > 0:
 *                         ullval = o
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_5);
        /*try:*/ {

          /* "msgpack/_packer.pyx":176
 *                 # So we should test long before int.
 *                 try:
 *                     if o > 0:             # <<<<<<<<<<<<<<
 *                         ullval = o
 *                         ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 */
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_o, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L7_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 176, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__pyx_t_1) {

            /* "msgpack/_packer.pyx":177
 *                 try:
 *                     if o > 0:
 *                         ullval = o             # <<<<<<<<<<<<<<
 *                         ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 *                     else:
 */
            __pyx_t_6 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_o); if (unlikely((__pyx_t_6 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L7_error)
            __pyx_v_ullval = __pyx_t_6;

            /* "msgpack/_packer.pyx":178
 *                     if o > 0:
 *                         ullval = o
 *                         ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)             # <<<<<<<<<<<<<<
 *                     else:
 *                         llval = o
 */
            __pyx_v_ret = msgpack_pack_unsigned_long_long((&__pyx_v_self->pk), __pyx_v_ullval);

            /* "msgpack/_packer.pyx":176
 *                 # So we should test long before int.
 *                 try:
 *                     if o > 0:             # <<<<<<<<<<<<<<
 *                         ullval = o
 *                         ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 */
            goto __pyx_L15;
          }

          /* "msgpack/_packer.pyx":180
 *                         ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 *                     else:
 *                         llval = o             # <<<<<<<<<<<<<<
 *                         ret = msgpack_pack_long_long(&self.pk, llval)
 *                 except OverflowError as oe:
 */
          /*else*/ {
            __pyx_t_7 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_o); if (unlikely((__pyx_t_7 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L7_error)
            __pyx_v_llval = __pyx_t_7;

            /* "msgpack/_packer.pyx":181
 *                     else:
 *                         llval = o
 *                         ret = msgpack_pack_long_long(&self.pk, llval)             # <<<<<<<<<<<<<<
 *                 except OverflowError as oe:
 *                     if not default_used and self._default is not None:
 */
            __pyx_v_ret = msgpack_pack_long_long((&__pyx_v_self->pk), __pyx_v_llval);
          }
          __pyx_L15:;

          /* "msgpack/_packer.pyx":175
 *                 # PyInt_Check(long) is True for Python 3.
 *                 # So we should test long before int.
 *                 try:             # <<<<<<<<<<<<<<
 *                     if o > 0:
 *                         ullval = o
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msgpack/_packer.pyx":182
 *                         llval = o
 *                         ret = msgpack_pack_long_long(&self.pk, llval)
 *                 except OverflowError as oe:             # <<<<<<<<<<<<<<
 *                     if not default_used and self._default is not None:
 *                         o = self._default(o)
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("msgpack._cmsgpack.Packer._pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 182, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __pyx_v_oe = __pyx_t_9;
          /*try:*/ {

            /* "msgpack/_packer.pyx":183
 *                         ret = msgpack_pack_long_long(&self.pk, llval)
 *                 except OverflowError as oe:
 *                     if not default_used and self._default is not None:             # <<<<<<<<<<<<<<
 *                         o = self._default(o)
 *                         default_used = True
 */
            __pyx_t_11 = (!(__pyx_v_default_used != 0));
            if (__pyx_t_11) {
            } else {
              __pyx_t_1 = __pyx_t_11;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_11 = (__pyx_v_self->_default != Py_None);
            __pyx_t_1 = __pyx_t_11;
            __pyx_L24_bool_binop_done:;
            if (likely(__pyx_t_1)) {

              /* "msgpack/_packer.pyx":184
 *                 except OverflowError as oe:
 *                     if not default_used and self._default is not None:
 *                         o = self._default(o)             # <<<<<<<<<<<<<<
 *                         default_used = True
 *                         continue
 */
              __Pyx_INCREF(__pyx_v_self->_default);
              __pyx_t_13 = __pyx_v_self->_default; __pyx_t_14 = NULL;
              __pyx_t_8 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_13))) {
                __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
                if (likely(__pyx_t_14)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                  __Pyx_INCREF(__pyx_t_14);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_13, function);
                  __pyx_t_8 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_v_o};
                __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 184, __pyx_L21_error)
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              }
              __Pyx_DECREF_SET(__pyx_v_o, __pyx_t_12);
              __pyx_t_12 = 0;

              /* "msgpack/_packer.pyx":185
 *                     if not default_used and self._default is not None:
 *                         o = self._default(o)
 *                         default_used = True             # <<<<<<<<<<<<<<
 *                         continue
 *                     else:
 */
              __pyx_v_default_used = 1;

              /* "msgpack/_packer.pyx":186
 *                         o = self._default(o)
 *                         default_used = True
 *                         continue             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise OverflowError("Integer value out of range")
 */
              goto __pyx_L18_continue;

              /* "msgpack/_packer.pyx":183
 *                         ret = msgpack_pack_long_long(&self.pk, llval)
 *                 except OverflowError as oe:
 *                     if not default_used and self._default is not None:             # <<<<<<<<<<<<<<
 *                         o = self._default(o)
 *                         default_used = True
 */
            }

            /* "msgpack/_packer.pyx":188
 *                         continue
 *                     else:
 *                         raise OverflowError("Integer value out of range")             # <<<<<<<<<<<<<<
 *             elif PyInt_CheckExact(o) if strict_types else PyInt_Check(o):
 *                 longval = o
 */
            /*else*/ {
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_OverflowError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 188, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_Raise(__pyx_t_12, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __PYX_ERR(0, 188, __pyx_L21_error)
            }
          }

          /* "msgpack/_packer.pyx":182
 *                         llval = o
 *                         ret = msgpack_pack_long_long(&self.pk, llval)
 *                 except OverflowError as oe:             # <<<<<<<<<<<<<<
 *                     if not default_used and self._default is not None:
 *                         o = self._default(o)
 */
          /*finally:*/ {
            __pyx_L21_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_22);
              __pyx_t_8 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_oe); __pyx_v_oe = 0;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_XGIVEREF(__pyx_t_21);
                __Pyx_XGIVEREF(__pyx_t_22);
                __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
              }
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
              __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
              __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
              goto __pyx_L9_except_error;
            }
            __pyx_L18_continue: {
              __Pyx_DECREF(__pyx_v_oe); __pyx_v_oe = 0;
              goto __pyx_L16_except_continue;
            }
          }
          __pyx_L16_except_continue:;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L13_try_continue;
        }
        goto __pyx_L9_except_error;

        /* "msgpack/_packer.pyx":175
 *                 # PyInt_Check(long) is True for Python 3.
 *                 # So we should test long before int.
 *                 try:             # <<<<<<<<<<<<<<
 *                     if o > 0:
 *                         ullval = o
 */
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
        goto __pyx_L1_error;
        __pyx_L13_try_continue:;
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
        goto __pyx_L4_continue;
        __pyx_L14_try_end:;
      }

      /* "msgpack/_packer.pyx":172
 *             elif o is False:
 *                 ret = msgpack_pack_false(&self.pk)
 *             elif PyLong_CheckExact(o) if strict_types else PyLong_Check(o):             # <<<<<<<<<<<<<<
 *                 # PyInt_Check(long) is True for Python 3.
 *                 # So we should test long before int.
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":189
 *                     else:
 *                         raise OverflowError("Integer value out of range")
 *             elif PyInt_CheckExact(o) if strict_types else PyInt_Check(o):             # <<<<<<<<<<<<<<
 *                 longval = o
 *                 ret = msgpack_pack_long(&self.pk, longval)
 */
    if (__pyx_v_strict_types) {
      __pyx_t_1 = PyInt_CheckExact(__pyx_v_o);
    } else {
      __pyx_t_1 = PyInt_Check(__pyx_v_o);
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":190
 *                         raise OverflowError("Integer value out of range")
 *             elif PyInt_CheckExact(o) if strict_types else PyInt_Check(o):
 *                 longval = o             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_long(&self.pk, longval)
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):
 */
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_v_o); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
      __pyx_v_longval = __pyx_t_23;

      /* "msgpack/_packer.pyx":191
 *             elif PyInt_CheckExact(o) if strict_types else PyInt_Check(o):
 *                 longval = o
 *                 ret = msgpack_pack_long(&self.pk, longval)             # <<<<<<<<<<<<<<
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):
 *                 if self.use_float:
 */
      __pyx_v_ret = msgpack_pack_long((&__pyx_v_self->pk), __pyx_v_longval);

      /* "msgpack/_packer.pyx":189
 *                     else:
 *                         raise OverflowError("Integer value out of range")
 *             elif PyInt_CheckExact(o) if strict_types else PyInt_Check(o):             # <<<<<<<<<<<<<<
 *                 longval = o
 *                 ret = msgpack_pack_long(&self.pk, longval)
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":192
 *                 longval = o
 *                 ret = msgpack_pack_long(&self.pk, longval)
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):             # <<<<<<<<<<<<<<
 *                 if self.use_float:
 *                    fval = o
 */
    if (__pyx_v_strict_types) {
      __pyx_t_1 = PyFloat_CheckExact(__pyx_v_o);
    } else {
      __pyx_t_1 = PyFloat_Check(__pyx_v_o);
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":193
 *                 ret = msgpack_pack_long(&self.pk, longval)
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):
 *                 if self.use_float:             # <<<<<<<<<<<<<<
 *                    fval = o
 *                    ret = msgpack_pack_float(&self.pk, fval)
 */
      if (__pyx_v_self->use_float) {

        /* "msgpack/_packer.pyx":194
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):
 *                 if self.use_float:
 *                    fval = o             # <<<<<<<<<<<<<<
 *                    ret = msgpack_pack_float(&self.pk, fval)
 *                 else:
 */
        __pyx_t_24 = __pyx_PyFloat_AsFloat(__pyx_v_o); if (unlikely((__pyx_t_24 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
        __pyx_v_fval = __pyx_t_24;

        /* "msgpack/_packer.pyx":195
 *                 if self.use_float:
 *                    fval = o
 *                    ret = msgpack_pack_float(&self.pk, fval)             # <<<<<<<<<<<<<<
 *                 else:
 *                    dval = o
 */
        __pyx_v_ret = msgpack_pack_float((&__pyx_v_self->pk), __pyx_v_fval);

        /* "msgpack/_packer.pyx":193
 *                 ret = msgpack_pack_long(&self.pk, longval)
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):
 *                 if self.use_float:             # <<<<<<<<<<<<<<
 *                    fval = o
 *                    ret = msgpack_pack_float(&self.pk, fval)
 */
        goto __pyx_L30;
      }

      /* "msgpack/_packer.pyx":197
 *                    ret = msgpack_pack_float(&self.pk, fval)
 *                 else:
 *                    dval = o             # <<<<<<<<<<<<<<
 *                    ret = msgpack_pack_double(&self.pk, dval)
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):
 */
      /*else*/ {
        __pyx_t_25 = __pyx_PyFloat_AsDouble(__pyx_v_o); if (unlikely((__pyx_t_25 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
        __pyx_v_dval = __pyx_t_25;

        /* "msgpack/_packer.pyx":198
 *                 else:
 *                    dval = o
 *                    ret = msgpack_pack_double(&self.pk, dval)             # <<<<<<<<<<<<<<
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):
 *                 L = Py_SIZE(o)
 */
        __pyx_v_ret = msgpack_pack_double((&__pyx_v_self->pk), __pyx_v_dval);
      }
      __pyx_L30:;

      /* "msgpack/_packer.pyx":192
 *                 longval = o
 *                 ret = msgpack_pack_long(&self.pk, longval)
 *             elif PyFloat_CheckExact(o) if strict_types else PyFloat_Check(o):             # <<<<<<<<<<<<<<
 *                 if self.use_float:
 *                    fval = o
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":199
 *                    dval = o
 *                    ret = msgpack_pack_double(&self.pk, dval)
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):             # <<<<<<<<<<<<<<
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 */
    if (__pyx_v_strict_types) {
      __pyx_t_8 = __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_CheckExact(__pyx_v_o); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_t_15 = __pyx_t_8;
    } else {
      __pyx_t_8 = __pyx_f_7msgpack_9_cmsgpack_PyBytesLike_Check(__pyx_v_o); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_t_15 = __pyx_t_8;
    }
    __pyx_t_1 = (__pyx_t_15 != 0);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":200
 *                    ret = msgpack_pack_double(&self.pk, dval)
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):
 *                 L = Py_SIZE(o)             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)
 */
      __pyx_v_L = Py_SIZE(__pyx_v_o);

      /* "msgpack/_packer.pyx":201
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)
 *                 rawval = o
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":202
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)             # <<<<<<<<<<<<<<
 *                 rawval = o
 *                 ret = msgpack_pack_bin(&self.pk, L)
 */
        __pyx_t_26 = PyErr_Format(__pyx_builtin_ValueError, ((char *)"%.200s object is too large"), Py_TYPE(__pyx_v_o)->tp_name); if (unlikely(__pyx_t_26 == ((PyObject *)NULL))) __PYX_ERR(0, 202, __pyx_L1_error)

        /* "msgpack/_packer.pyx":201
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)
 *                 rawval = o
 */
      }

      /* "msgpack/_packer.pyx":203
 *                 if L > ITEM_LIMIT:
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)
 *                 rawval = o             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:
 */
      __pyx_t_27 = __Pyx_PyObject_AsWritableString(__pyx_v_o); if (unlikely((!__pyx_t_27) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L1_error)
      __pyx_v_rawval = __pyx_t_27;

      /* "msgpack/_packer.pyx":204
 *                     PyErr_Format(ValueError, b"%.200s object is too large", Py_TYPE(o).tp_name)
 *                 rawval = o
 *                 ret = msgpack_pack_bin(&self.pk, L)             # <<<<<<<<<<<<<<
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 */
      __pyx_v_ret = msgpack_pack_bin((&__pyx_v_self->pk), __pyx_v_L);

      /* "msgpack/_packer.pyx":205
 *                 rawval = o
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 */
      __pyx_t_1 = (__pyx_v_ret == 0);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":206
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)             # <<<<<<<<<<<<<<
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 *                 if self.unicode_errors == NULL:
 */
        __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_v_rawval, __pyx_v_L);

        /* "msgpack/_packer.pyx":205
 *                 rawval = o
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 */
      }

      /* "msgpack/_packer.pyx":199
 *                    dval = o
 *                    ret = msgpack_pack_double(&self.pk, dval)
 *             elif PyBytesLike_CheckExact(o) if strict_types else PyBytesLike_Check(o):             # <<<<<<<<<<<<<<
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":207
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):             # <<<<<<<<<<<<<<
 *                 if self.unicode_errors == NULL:
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 */
    if (__pyx_v_strict_types) {
      __pyx_t_1 = PyUnicode_CheckExact(__pyx_v_o);
    } else {
      __pyx_t_1 = PyUnicode_Check(__pyx_v_o);
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":208
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 *                 if self.unicode_errors == NULL:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 *                     if ret == -2:
 */
      __pyx_t_1 = (__pyx_v_self->unicode_errors == NULL);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":209
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 *                 if self.unicode_errors == NULL:
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);             # <<<<<<<<<<<<<<
 *                     if ret == -2:
 *                         raise ValueError("unicode string is too large")
 */
        __pyx_v_ret = msgpack_pack_unicode((&__pyx_v_self->pk), __pyx_v_o, __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);

        /* "msgpack/_packer.pyx":210
 *                 if self.unicode_errors == NULL:
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 *                     if ret == -2:             # <<<<<<<<<<<<<<
 *                         raise ValueError("unicode string is too large")
 *                 else:
 */
        __pyx_t_1 = (__pyx_v_ret == -2L);
        if (unlikely(__pyx_t_1)) {

          /* "msgpack/_packer.pyx":211
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 *                     if ret == -2:
 *                         raise ValueError("unicode string is too large")             # <<<<<<<<<<<<<<
 *                 else:
 *                     o = PyUnicode_AsEncodedString(o, NULL, self.unicode_errors)
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 211, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_Raise(__pyx_t_10, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __PYX_ERR(0, 211, __pyx_L1_error)

          /* "msgpack/_packer.pyx":210
 *                 if self.unicode_errors == NULL:
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 *                     if ret == -2:             # <<<<<<<<<<<<<<
 *                         raise ValueError("unicode string is too large")
 *                 else:
 */
        }

        /* "msgpack/_packer.pyx":208
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):
 *                 if self.unicode_errors == NULL:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 *                     if ret == -2:
 */
        goto __pyx_L33;
      }

      /* "msgpack/_packer.pyx":213
 *                         raise ValueError("unicode string is too large")
 *                 else:
 *                     o = PyUnicode_AsEncodedString(o, NULL, self.unicode_errors)             # <<<<<<<<<<<<<<
 *                     L = Py_SIZE(o)
 *                     if L > ITEM_LIMIT:
 */
      /*else*/ {
        __pyx_t_10 = PyUnicode_AsEncodedString(__pyx_v_o, NULL, __pyx_v_self->unicode_errors); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF_SET(__pyx_v_o, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msgpack/_packer.pyx":214
 *                 else:
 *                     o = PyUnicode_AsEncodedString(o, NULL, self.unicode_errors)
 *                     L = Py_SIZE(o)             # <<<<<<<<<<<<<<
 *                     if L > ITEM_LIMIT:
 *                         raise ValueError("unicode string is too large")
 */
        __pyx_v_L = Py_SIZE(__pyx_v_o);

        /* "msgpack/_packer.pyx":215
 *                     o = PyUnicode_AsEncodedString(o, NULL, self.unicode_errors)
 *                     L = Py_SIZE(o)
 *                     if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                         raise ValueError("unicode string is too large")
 *                     ret = msgpack_pack_raw(&self.pk, L)
 */
        __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
        if (unlikely(__pyx_t_1)) {

          /* "msgpack/_packer.pyx":216
 *                     L = Py_SIZE(o)
 *                     if L > ITEM_LIMIT:
 *                         raise ValueError("unicode string is too large")             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_raw(&self.pk, L)
 *                     if ret == 0:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_Raise(__pyx_t_10, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __PYX_ERR(0, 216, __pyx_L1_error)

          /* "msgpack/_packer.pyx":215
 *                     o = PyUnicode_AsEncodedString(o, NULL, self.unicode_errors)
 *                     L = Py_SIZE(o)
 *                     if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                         raise ValueError("unicode string is too large")
 *                     ret = msgpack_pack_raw(&self.pk, L)
 */
        }

        /* "msgpack/_packer.pyx":217
 *                     if L > ITEM_LIMIT:
 *                         raise ValueError("unicode string is too large")
 *                     ret = msgpack_pack_raw(&self.pk, L)             # <<<<<<<<<<<<<<
 *                     if ret == 0:
 *                         rawval = o
 */
        __pyx_v_ret = msgpack_pack_raw((&__pyx_v_self->pk), __pyx_v_L);

        /* "msgpack/_packer.pyx":218
 *                         raise ValueError("unicode string is too large")
 *                     ret = msgpack_pack_raw(&self.pk, L)
 *                     if ret == 0:             # <<<<<<<<<<<<<<
 *                         rawval = o
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 */
        __pyx_t_1 = (__pyx_v_ret == 0);
        if (__pyx_t_1) {

          /* "msgpack/_packer.pyx":219
 *                     ret = msgpack_pack_raw(&self.pk, L)
 *                     if ret == 0:
 *                         rawval = o             # <<<<<<<<<<<<<<
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyDict_CheckExact(o):
 */
          __pyx_t_27 = __Pyx_PyObject_AsWritableString(__pyx_v_o); if (unlikely((!__pyx_t_27) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L1_error)
          __pyx_v_rawval = __pyx_t_27;

          /* "msgpack/_packer.pyx":220
 *                     if ret == 0:
 *                         rawval = o
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)             # <<<<<<<<<<<<<<
 *             elif PyDict_CheckExact(o):
 *                 d = <dict>o
 */
          __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_v_rawval, __pyx_v_L);

          /* "msgpack/_packer.pyx":218
 *                         raise ValueError("unicode string is too large")
 *                     ret = msgpack_pack_raw(&self.pk, L)
 *                     if ret == 0:             # <<<<<<<<<<<<<<
 *                         rawval = o
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 */
        }
      }
      __pyx_L33:;

      /* "msgpack/_packer.pyx":207
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyUnicode_CheckExact(o) if strict_types else PyUnicode_Check(o):             # <<<<<<<<<<<<<<
 *                 if self.unicode_errors == NULL:
 *                     ret = msgpack_pack_unicode(&self.pk, o, ITEM_LIMIT);
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":221
 *                         rawval = o
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyDict_CheckExact(o):             # <<<<<<<<<<<<<<
 *                 d = <dict>o
 *                 L = len(d)
 */
    __pyx_t_1 = PyDict_CheckExact(__pyx_v_o);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":222
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyDict_CheckExact(o):
 *                 d = <dict>o             # <<<<<<<<<<<<<<
 *                 L = len(d)
 *                 if L > ITEM_LIMIT:
 */
      __pyx_t_10 = __pyx_v_o;
      __Pyx_INCREF(__pyx_t_10);
      __pyx_v_d = ((PyObject*)__pyx_t_10);
      __pyx_t_10 = 0;

      /* "msgpack/_packer.pyx":223
 *             elif PyDict_CheckExact(o):
 *                 d = <dict>o
 *                 L = len(d)             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")
 */
      if (unlikely(__pyx_v_d == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 223, __pyx_L1_error)
      }
      __pyx_t_28 = PyDict_Size(__pyx_v_d); if (unlikely(__pyx_t_28 == ((Py_ssize_t)-1))) __PYX_ERR(0, 223, __pyx_L1_error)
      __pyx_v_L = __pyx_t_28;

      /* "msgpack/_packer.pyx":224
 *                 d = <dict>o
 *                 L = len(d)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":225
 *                 L = len(d)
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 225, __pyx_L1_error)

        /* "msgpack/_packer.pyx":224
 *                 d = <dict>o
 *                 L = len(d)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 */
      }

      /* "msgpack/_packer.pyx":226
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)             # <<<<<<<<<<<<<<
 *                 if ret == 0:
 *                     for k, v in d.items():
 */
      __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_v_L);

      /* "msgpack/_packer.pyx":227
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for k, v in d.items():
 *                         ret = self._pack(k, nest_limit-1)
 */
      __pyx_t_1 = (__pyx_v_ret == 0);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":228
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:
 *                     for k, v in d.items():             # <<<<<<<<<<<<<<
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break
 */
        __pyx_t_28 = 0;
        if (unlikely(__pyx_v_d == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
          __PYX_ERR(0, 228, __pyx_L1_error)
        }
        __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_items, (&__pyx_t_29), (&__pyx_t_15)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10);
        __pyx_t_10 = __pyx_t_9;
        __pyx_t_9 = 0;
        while (1) {
          __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_10, __pyx_t_29, &__pyx_t_28, &__pyx_t_9, &__pyx_t_2, NULL, __pyx_t_15);
          if (unlikely(__pyx_t_8 == 0)) break;
          if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 228, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "msgpack/_packer.pyx":229
 *                 if ret == 0:
 *                     for k, v in d.items():
 *                         ret = self._pack(k, nest_limit-1)             # <<<<<<<<<<<<<<
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)
 */
          __pyx_t_30.__pyx_n = 1;
          __pyx_t_30.nest_limit = (__pyx_v_nest_limit - 1);
          __pyx_t_8 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, &__pyx_t_30); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
          __pyx_v_ret = __pyx_t_8;

          /* "msgpack/_packer.pyx":230
 *                     for k, v in d.items():
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break             # <<<<<<<<<<<<<<
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 */
          __pyx_t_1 = (__pyx_v_ret != 0);
          if (__pyx_t_1) {
            goto __pyx_L40_break;
          }

          /* "msgpack/_packer.pyx":231
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                         if ret != 0: break
 *             elif not strict_types and PyDict_Check(o):
 */
          __pyx_t_30.__pyx_n = 1;
          __pyx_t_30.nest_limit = (__pyx_v_nest_limit - 1);
          __pyx_t_8 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_30); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 231, __pyx_L1_error)
          __pyx_v_ret = __pyx_t_8;

          /* "msgpack/_packer.pyx":232
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break             # <<<<<<<<<<<<<<
 *             elif not strict_types and PyDict_Check(o):
 *                 L = len(o)
 */
          __pyx_t_1 = (__pyx_v_ret != 0);
          if (__pyx_t_1) {
            goto __pyx_L40_break;
          }
        }
        __pyx_L40_break:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "msgpack/_packer.pyx":227
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for k, v in d.items():
 *                         ret = self._pack(k, nest_limit-1)
 */
      }

      /* "msgpack/_packer.pyx":221
 *                         rawval = o
 *                         ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif PyDict_CheckExact(o):             # <<<<<<<<<<<<<<
 *                 d = <dict>o
 *                 L = len(d)
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":233
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif not strict_types and PyDict_Check(o):             # <<<<<<<<<<<<<<
 *                 L = len(o)
 *                 if L > ITEM_LIMIT:
 */
    __pyx_t_11 = (!__pyx_v_strict_types);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L43_bool_binop_done;
    }
    __pyx_t_11 = PyDict_Check(__pyx_v_o);
    __pyx_t_1 = __pyx_t_11;
    __pyx_L43_bool_binop_done:;
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":234
 *                         if ret != 0: break
 *             elif not strict_types and PyDict_Check(o):
 *                 L = len(o)             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")
 */
      __pyx_t_29 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_29 == ((Py_ssize_t)-1))) __PYX_ERR(0, 234, __pyx_L1_error)
      __pyx_v_L = __pyx_t_29;

      /* "msgpack/_packer.pyx":235
 *             elif not strict_types and PyDict_Check(o):
 *                 L = len(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":236
 *                 L = len(o)
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 236, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 236, __pyx_L1_error)

        /* "msgpack/_packer.pyx":235
 *             elif not strict_types and PyDict_Check(o):
 *                 L = len(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 */
      }

      /* "msgpack/_packer.pyx":237
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)             # <<<<<<<<<<<<<<
 *                 if ret == 0:
 *                     for k, v in o.items():
 */
      __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_v_L);

      /* "msgpack/_packer.pyx":238
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for k, v in o.items():
 *                         ret = self._pack(k, nest_limit-1)
 */
      __pyx_t_1 = (__pyx_v_ret == 0);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":239
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:
 *                     for k, v in o.items():             # <<<<<<<<<<<<<<
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break
 */
        __pyx_t_29 = 0;
        if (unlikely(__pyx_v_o == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
          __PYX_ERR(0, 239, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_o, 0, __pyx_n_s_items, (&__pyx_t_28), (&__pyx_t_15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_10);
        __pyx_t_10 = __pyx_t_2;
        __pyx_t_2 = 0;
        while (1) {
          __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_10, __pyx_t_28, &__pyx_t_29, &__pyx_t_2, &__pyx_t_9, NULL, __pyx_t_15);
          if (unlikely(__pyx_t_8 == 0)) break;
          if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 239, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "msgpack/_packer.pyx":240
 *                 if ret == 0:
 *                     for k, v in o.items():
 *                         ret = self._pack(k, nest_limit-1)             # <<<<<<<<<<<<<<
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)
 */
          __pyx_t_30.__pyx_n = 1;
          __pyx_t_30.nest_limit = (__pyx_v_nest_limit - 1);
          __pyx_t_8 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, &__pyx_t_30); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 240, __pyx_L1_error)
          __pyx_v_ret = __pyx_t_8;

          /* "msgpack/_packer.pyx":241
 *                     for k, v in o.items():
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break             # <<<<<<<<<<<<<<
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 */
          __pyx_t_1 = (__pyx_v_ret != 0);
          if (__pyx_t_1) {
            goto __pyx_L48_break;
          }

          /* "msgpack/_packer.pyx":242
 *                         ret = self._pack(k, nest_limit-1)
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                         if ret != 0: break
 *             elif type(o) is ExtType if strict_types else isinstance(o, ExtType):
 */
          __pyx_t_30.__pyx_n = 1;
          __pyx_t_30.nest_limit = (__pyx_v_nest_limit - 1);
          __pyx_t_8 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_30); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 242, __pyx_L1_error)
          __pyx_v_ret = __pyx_t_8;

          /* "msgpack/_packer.pyx":243
 *                         if ret != 0: break
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break             # <<<<<<<<<<<<<<
 *             elif type(o) is ExtType if strict_types else isinstance(o, ExtType):
 *                 # This should be before Tuple because ExtType is namedtuple.
 */
          __pyx_t_1 = (__pyx_v_ret != 0);
          if (__pyx_t_1) {
            goto __pyx_L48_break;
          }
        }
        __pyx_L48_break:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "msgpack/_packer.pyx":238
 *                     raise ValueError("dict is too large")
 *                 ret = msgpack_pack_map(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for k, v in o.items():
 *                         ret = self._pack(k, nest_limit-1)
 */
      }

      /* "msgpack/_packer.pyx":233
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif not strict_types and PyDict_Check(o):             # <<<<<<<<<<<<<<
 *                 L = len(o)
 *                 if L > ITEM_LIMIT:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":244
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif type(o) is ExtType if strict_types else isinstance(o, ExtType):             # <<<<<<<<<<<<<<
 *                 # This should be before Tuple because ExtType is namedtuple.
 *                 longval = o.code
 */
    if (__pyx_v_strict_types) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_o); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = (__pyx_t_10 == __pyx_v_7msgpack_9_cmsgpack_ExtType);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_t_11;
    } else {
      __pyx_t_10 = __pyx_v_7msgpack_9_cmsgpack_ExtType;
      __Pyx_INCREF(__pyx_t_10);
      __pyx_t_11 = PyObject_IsInstance(__pyx_v_o, __pyx_t_10); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_t_11;
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":246
 *             elif type(o) is ExtType if strict_types else isinstance(o, ExtType):
 *                 # This should be before Tuple because ExtType is namedtuple.
 *                 longval = o.code             # <<<<<<<<<<<<<<
 *                 rawval = o.data
 *                 L = len(o.data)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_code); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_t_10); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_longval = __pyx_t_23;

      /* "msgpack/_packer.pyx":247
 *                 # This should be before Tuple because ExtType is namedtuple.
 *                 longval = o.code
 *                 rawval = o.data             # <<<<<<<<<<<<<<
 *                 L = len(o.data)
 *                 if L > ITEM_LIMIT:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_data); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_27 = __Pyx_PyObject_AsWritableString(__pyx_t_10); if (unlikely((!__pyx_t_27) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
      __pyx_v_rawval = __pyx_t_27;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "msgpack/_packer.pyx":248
 *                 longval = o.code
 *                 rawval = o.data
 *                 L = len(o.data)             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("EXT data is too large")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_data); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_28 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_28 == ((Py_ssize_t)-1))) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_L = __pyx_t_28;

      /* "msgpack/_packer.pyx":249
 *                 rawval = o.data
 *                 L = len(o.data)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("EXT data is too large")
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":250
 *                 L = len(o.data)
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("EXT data is too large")             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 250, __pyx_L1_error)

        /* "msgpack/_packer.pyx":249
 *                 rawval = o.data
 *                 L = len(o.data)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("EXT data is too large")
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 */
      }

      /* "msgpack/_packer.pyx":251
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("EXT data is too large")
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif type(o) is Timestamp:
 */
      __pyx_v_ret = msgpack_pack_ext((&__pyx_v_self->pk), __pyx_v_longval, __pyx_v_L);

      /* "msgpack/_packer.pyx":252
 *                     raise ValueError("EXT data is too large")
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)             # <<<<<<<<<<<<<<
 *             elif type(o) is Timestamp:
 *                 llval = o.seconds
 */
      __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_v_rawval, __pyx_v_L);

      /* "msgpack/_packer.pyx":244
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif type(o) is ExtType if strict_types else isinstance(o, ExtType):             # <<<<<<<<<<<<<<
 *                 # This should be before Tuple because ExtType is namedtuple.
 *                 longval = o.code
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":253
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif type(o) is Timestamp:             # <<<<<<<<<<<<<<
 *                 llval = o.seconds
 *                 ulval = o.nanoseconds
 */
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_o); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = (__pyx_t_10 == __pyx_v_7msgpack_9_cmsgpack_Timestamp);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":254
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif type(o) is Timestamp:
 *                 llval = o.seconds             # <<<<<<<<<<<<<<
 *                 ulval = o.nanoseconds
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_seconds); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_10); if (unlikely((__pyx_t_7 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_llval = __pyx_t_7;

      /* "msgpack/_packer.pyx":255
 *             elif type(o) is Timestamp:
 *                 llval = o.seconds
 *                 ulval = o.nanoseconds             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_nanoseconds); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_31 = __Pyx_PyInt_As_unsigned_long(__pyx_t_10); if (unlikely((__pyx_t_31 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_ulval = __pyx_t_31;

      /* "msgpack/_packer.pyx":256
 *                 llval = o.seconds
 *                 ulval = o.nanoseconds
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)             # <<<<<<<<<<<<<<
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):
 *                 L = Py_SIZE(o)
 */
      __pyx_v_ret = msgpack_pack_timestamp((&__pyx_v_self->pk), __pyx_v_llval, __pyx_v_ulval);

      /* "msgpack/_packer.pyx":253
 *                 ret = msgpack_pack_ext(&self.pk, longval, L)
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, L)
 *             elif type(o) is Timestamp:             # <<<<<<<<<<<<<<
 *                 llval = o.seconds
 *                 ulval = o.nanoseconds
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":257
 *                 ulval = o.nanoseconds
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):             # <<<<<<<<<<<<<<
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 */
    if (__pyx_v_strict_types) {
      __pyx_t_1 = PyList_CheckExact(__pyx_v_o);
    } else {
      __pyx_t_32 = PyTuple_Check(__pyx_v_o);
      if (!__pyx_t_32) {
      } else {
        __pyx_t_11 = __pyx_t_32;
        goto __pyx_L52_bool_binop_done;
      }
      __pyx_t_32 = PyList_Check(__pyx_v_o);
      __pyx_t_11 = __pyx_t_32;
      __pyx_L52_bool_binop_done:;
      __pyx_t_1 = __pyx_t_11;
    }
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":258
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):
 *                 L = Py_SIZE(o)             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("list is too large")
 */
      __pyx_v_L = Py_SIZE(__pyx_v_o);

      /* "msgpack/_packer.pyx":259
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("list is too large")
 *                 ret = msgpack_pack_array(&self.pk, L)
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":260
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("list is too large")             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_array(&self.pk, L)
 *                 if ret == 0:
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 260, __pyx_L1_error)

        /* "msgpack/_packer.pyx":259
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     raise ValueError("list is too large")
 *                 ret = msgpack_pack_array(&self.pk, L)
 */
      }

      /* "msgpack/_packer.pyx":261
 *                 if L > ITEM_LIMIT:
 *                     raise ValueError("list is too large")
 *                 ret = msgpack_pack_array(&self.pk, L)             # <<<<<<<<<<<<<<
 *                 if ret == 0:
 *                     for v in o:
 */
      __pyx_v_ret = msgpack_pack_array((&__pyx_v_self->pk), __pyx_v_L);

      /* "msgpack/_packer.pyx":262
 *                     raise ValueError("list is too large")
 *                 ret = msgpack_pack_array(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for v in o:
 *                         ret = self._pack(v, nest_limit-1)
 */
      __pyx_t_1 = (__pyx_v_ret == 0);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":263
 *                 ret = msgpack_pack_array(&self.pk, L)
 *                 if ret == 0:
 *                     for v in o:             # <<<<<<<<<<<<<<
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 */
        if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
          __pyx_t_10 = __pyx_v_o; __Pyx_INCREF(__pyx_t_10); __pyx_t_28 = 0;
          __pyx_t_33 = NULL;
        } else {
          __pyx_t_28 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_33 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 263, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_33)) {
            if (likely(PyList_CheckExact(__pyx_t_10))) {
              if (__pyx_t_28 >= PyList_GET_SIZE(__pyx_t_10)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_28); __Pyx_INCREF(__pyx_t_9); __pyx_t_28++; if (unlikely((0 < 0))) __PYX_ERR(0, 263, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_10, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_28 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_28); __Pyx_INCREF(__pyx_t_9); __pyx_t_28++; if (unlikely((0 < 0))) __PYX_ERR(0, 263, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_10, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_33(__pyx_t_10);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 263, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "msgpack/_packer.pyx":264
 *                 if ret == 0:
 *                     for v in o:
 *                         ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                         if ret != 0: break
 *             elif PyMemoryView_Check(o):
 */
          __pyx_t_30.__pyx_n = 1;
          __pyx_t_30.nest_limit = (__pyx_v_nest_limit - 1);
          __pyx_t_15 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_30); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 264, __pyx_L1_error)
          __pyx_v_ret = __pyx_t_15;

          /* "msgpack/_packer.pyx":265
 *                     for v in o:
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break             # <<<<<<<<<<<<<<
 *             elif PyMemoryView_Check(o):
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:
 */
          __pyx_t_1 = (__pyx_v_ret != 0);
          if (__pyx_t_1) {
            goto __pyx_L57_break;
          }

          /* "msgpack/_packer.pyx":263
 *                 ret = msgpack_pack_array(&self.pk, L)
 *                 if ret == 0:
 *                     for v in o:             # <<<<<<<<<<<<<<
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 */
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L59_for_end;
        __pyx_L57_break:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L59_for_end;
        __pyx_L59_for_end:;

        /* "msgpack/_packer.pyx":262
 *                     raise ValueError("list is too large")
 *                 ret = msgpack_pack_array(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     for v in o:
 *                         ret = self._pack(v, nest_limit-1)
 */
      }

      /* "msgpack/_packer.pyx":257
 *                 ulval = o.nanoseconds
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif PyList_CheckExact(o) if strict_types else (PyTuple_Check(o) or PyList_Check(o)):             # <<<<<<<<<<<<<<
 *                 L = Py_SIZE(o)
 *                 if L > ITEM_LIMIT:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":266
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif PyMemoryView_Check(o):             # <<<<<<<<<<<<<<
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:
 *                     raise ValueError("could not get buffer for memoryview")
 */
    __pyx_t_1 = (PyMemoryView_Check(__pyx_v_o) != 0);
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":267
 *                         if ret != 0: break
 *             elif PyMemoryView_Check(o):
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("could not get buffer for memoryview")
 *                 L = view.len
 */
      __pyx_t_15 = PyObject_GetBuffer(__pyx_v_o, (&__pyx_v_view), PyBUF_SIMPLE); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 267, __pyx_L1_error)
      __pyx_t_1 = (__pyx_t_15 != 0);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":268
 *             elif PyMemoryView_Check(o):
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:
 *                     raise ValueError("could not get buffer for memoryview")             # <<<<<<<<<<<<<<
 *                 L = view.len
 *                 if L > ITEM_LIMIT:
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 268, __pyx_L1_error)

        /* "msgpack/_packer.pyx":267
 *                         if ret != 0: break
 *             elif PyMemoryView_Check(o):
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("could not get buffer for memoryview")
 *                 L = view.len
 */
      }

      /* "msgpack/_packer.pyx":269
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:
 *                     raise ValueError("could not get buffer for memoryview")
 *                 L = view.len             # <<<<<<<<<<<<<<
 *                 if L > ITEM_LIMIT:
 *                     PyBuffer_Release(&view);
 */
      __pyx_t_28 = __pyx_v_view.len;
      __pyx_v_L = __pyx_t_28;

      /* "msgpack/_packer.pyx":270
 *                     raise ValueError("could not get buffer for memoryview")
 *                 L = view.len
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     PyBuffer_Release(&view);
 *                     raise ValueError("memoryview is too large")
 */
      __pyx_t_1 = (__pyx_v_L > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":271
 *                 L = view.len
 *                 if L > ITEM_LIMIT:
 *                     PyBuffer_Release(&view);             # <<<<<<<<<<<<<<
 *                     raise ValueError("memoryview is too large")
 *                 ret = msgpack_pack_bin(&self.pk, L)
 */
        PyBuffer_Release((&__pyx_v_view));

        /* "msgpack/_packer.pyx":272
 *                 if L > ITEM_LIMIT:
 *                     PyBuffer_Release(&view);
 *                     raise ValueError("memoryview is too large")             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 272, __pyx_L1_error)

        /* "msgpack/_packer.pyx":270
 *                     raise ValueError("could not get buffer for memoryview")
 *                 L = view.len
 *                 if L > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *                     PyBuffer_Release(&view);
 *                     raise ValueError("memoryview is too large")
 */
      }

      /* "msgpack/_packer.pyx":273
 *                     PyBuffer_Release(&view);
 *                     raise ValueError("memoryview is too large")
 *                 ret = msgpack_pack_bin(&self.pk, L)             # <<<<<<<<<<<<<<
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 */
      __pyx_v_ret = msgpack_pack_bin((&__pyx_v_self->pk), __pyx_v_L);

      /* "msgpack/_packer.pyx":274
 *                     raise ValueError("memoryview is too large")
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 *                 PyBuffer_Release(&view);
 */
      __pyx_t_1 = (__pyx_v_ret == 0);
      if (__pyx_t_1) {

        /* "msgpack/_packer.pyx":275
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)             # <<<<<<<<<<<<<<
 *                 PyBuffer_Release(&view);
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:
 */
        __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), ((char *)__pyx_v_view.buf), __pyx_v_L);

        /* "msgpack/_packer.pyx":274
 *                     raise ValueError("memoryview is too large")
 *                 ret = msgpack_pack_bin(&self.pk, L)
 *                 if ret == 0:             # <<<<<<<<<<<<<<
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 *                 PyBuffer_Release(&view);
 */
      }

      /* "msgpack/_packer.pyx":276
 *                 if ret == 0:
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 *                 PyBuffer_Release(&view);             # <<<<<<<<<<<<<<
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:
 *                 delta = o - epoch
 */
      PyBuffer_Release((&__pyx_v_view));

      /* "msgpack/_packer.pyx":266
 *                         ret = self._pack(v, nest_limit-1)
 *                         if ret != 0: break
 *             elif PyMemoryView_Check(o):             # <<<<<<<<<<<<<<
 *                 if PyObject_GetBuffer(o, &view, PyBUF_SIMPLE) != 0:
 *                     raise ValueError("could not get buffer for memoryview")
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":277
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 *                 PyBuffer_Release(&view);
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:             # <<<<<<<<<<<<<<
 *                 delta = o - epoch
 *                 if not PyDelta_CheckExact(delta):
 */
    if (__pyx_v_self->datetime) {
    } else {
      __pyx_t_1 = __pyx_v_self->datetime;
      goto __pyx_L63_bool_binop_done;
    }
    __pyx_t_11 = PyDateTime_CheckExact(__pyx_v_o);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L63_bool_binop_done;
    }
    __pyx_t_10 = __pyx_f_7cpython_8datetime_datetime_tzinfo(__pyx_v_o); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = (__pyx_t_10 != Py_None);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_1 = __pyx_t_11;
    __pyx_L63_bool_binop_done:;
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":278
 *                 PyBuffer_Release(&view);
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:
 *                 delta = o - epoch             # <<<<<<<<<<<<<<
 *                 if not PyDelta_CheckExact(delta):
 *                     raise ValueError("failed to calculate delta")
 */
      __pyx_t_10 = PyNumber_Subtract(__pyx_v_o, __pyx_v_7msgpack_9_cmsgpack_epoch); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_v_delta = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "msgpack/_packer.pyx":279
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:
 *                 delta = o - epoch
 *                 if not PyDelta_CheckExact(delta):             # <<<<<<<<<<<<<<
 *                     raise ValueError("failed to calculate delta")
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)
 */
      __pyx_t_1 = (!PyDelta_CheckExact(__pyx_v_delta));
      if (unlikely(__pyx_t_1)) {

        /* "msgpack/_packer.pyx":280
 *                 delta = o - epoch
 *                 if not PyDelta_CheckExact(delta):
 *                     raise ValueError("failed to calculate delta")             # <<<<<<<<<<<<<<
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)
 *                 ulval = timedelta_microseconds(delta) * 1000
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(0, 280, __pyx_L1_error)

        /* "msgpack/_packer.pyx":279
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:
 *                 delta = o - epoch
 *                 if not PyDelta_CheckExact(delta):             # <<<<<<<<<<<<<<
 *                     raise ValueError("failed to calculate delta")
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)
 */
      }

      /* "msgpack/_packer.pyx":281
 *                 if not PyDelta_CheckExact(delta):
 *                     raise ValueError("failed to calculate delta")
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)             # <<<<<<<<<<<<<<
 *                 ulval = timedelta_microseconds(delta) * 1000
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 */
      __pyx_t_15 = __pyx_f_7cpython_8datetime_timedelta_days(__pyx_v_delta); if (unlikely(__pyx_t_15 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
      __pyx_t_8 = __pyx_f_7cpython_8datetime_timedelta_seconds(__pyx_v_delta); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
      __pyx_v_llval = ((__pyx_t_15 * ((PY_LONG_LONG)0x15180)) + __pyx_t_8);

      /* "msgpack/_packer.pyx":282
 *                     raise ValueError("failed to calculate delta")
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)
 *                 ulval = timedelta_microseconds(delta) * 1000             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif not default_used and self._default:
 */
      __pyx_t_8 = __pyx_f_7cpython_8datetime_timedelta_microseconds(__pyx_v_delta); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
      __pyx_v_ulval = (__pyx_t_8 * 0x3E8);

      /* "msgpack/_packer.pyx":283
 *                 llval = timedelta_days(delta) * <long long>(24*60*60) + timedelta_seconds(delta)
 *                 ulval = timedelta_microseconds(delta) * 1000
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)             # <<<<<<<<<<<<<<
 *             elif not default_used and self._default:
 *                 o = self._default(o)
 */
      __pyx_v_ret = msgpack_pack_timestamp((&__pyx_v_self->pk), __pyx_v_llval, __pyx_v_ulval);

      /* "msgpack/_packer.pyx":277
 *                     ret = msgpack_pack_raw_body(&self.pk, <char*>view.buf, L)
 *                 PyBuffer_Release(&view);
 *             elif self.datetime and PyDateTime_CheckExact(o) and datetime_tzinfo(o) is not None:             # <<<<<<<<<<<<<<
 *                 delta = o - epoch
 *                 if not PyDelta_CheckExact(delta):
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":284
 *                 ulval = timedelta_microseconds(delta) * 1000
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif not default_used and self._default:             # <<<<<<<<<<<<<<
 *                 o = self._default(o)
 *                 default_used = 1
 */
    __pyx_t_11 = (!(__pyx_v_default_used != 0));
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L67_bool_binop_done;
    }
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_self->_default); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 284, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_11;
    __pyx_L67_bool_binop_done:;
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":285
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif not default_used and self._default:
 *                 o = self._default(o)             # <<<<<<<<<<<<<<
 *                 default_used = 1
 *                 continue
 */
      __Pyx_INCREF(__pyx_v_self->_default);
      __pyx_t_9 = __pyx_v_self->_default; __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_o};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_o, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "msgpack/_packer.pyx":286
 *             elif not default_used and self._default:
 *                 o = self._default(o)
 *                 default_used = 1             # <<<<<<<<<<<<<<
 *                 continue
 *             elif self.datetime and PyDateTime_CheckExact(o):
 */
      __pyx_v_default_used = 1;

      /* "msgpack/_packer.pyx":287
 *                 o = self._default(o)
 *                 default_used = 1
 *                 continue             # <<<<<<<<<<<<<<
 *             elif self.datetime and PyDateTime_CheckExact(o):
 *                 PyErr_Format(ValueError, b"can not serialize '%.200s' object where tzinfo=None", Py_TYPE(o).tp_name)
 */
      goto __pyx_L4_continue;

      /* "msgpack/_packer.pyx":284
 *                 ulval = timedelta_microseconds(delta) * 1000
 *                 ret = msgpack_pack_timestamp(&self.pk, llval, ulval)
 *             elif not default_used and self._default:             # <<<<<<<<<<<<<<
 *                 o = self._default(o)
 *                 default_used = 1
 */
    }

    /* "msgpack/_packer.pyx":288
 *                 default_used = 1
 *                 continue
 *             elif self.datetime and PyDateTime_CheckExact(o):             # <<<<<<<<<<<<<<
 *                 PyErr_Format(ValueError, b"can not serialize '%.200s' object where tzinfo=None", Py_TYPE(o).tp_name)
 *             else:
 */
    if (__pyx_v_self->datetime) {
    } else {
      __pyx_t_1 = __pyx_v_self->datetime;
      goto __pyx_L69_bool_binop_done;
    }
    __pyx_t_11 = PyDateTime_CheckExact(__pyx_v_o);
    __pyx_t_1 = __pyx_t_11;
    __pyx_L69_bool_binop_done:;
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":289
 *                 continue
 *             elif self.datetime and PyDateTime_CheckExact(o):
 *                 PyErr_Format(ValueError, b"can not serialize '%.200s' object where tzinfo=None", Py_TYPE(o).tp_name)             # <<<<<<<<<<<<<<
 *             else:
 *                 PyErr_Format(TypeError, b"can not serialize '%.200s' object", Py_TYPE(o).tp_name)
 */
      __pyx_t_26 = PyErr_Format(__pyx_builtin_ValueError, ((char *)"can not serialize '%.200s' object where tzinfo=None"), Py_TYPE(__pyx_v_o)->tp_name); if (unlikely(__pyx_t_26 == ((PyObject *)NULL))) __PYX_ERR(0, 289, __pyx_L1_error)

      /* "msgpack/_packer.pyx":288
 *                 default_used = 1
 *                 continue
 *             elif self.datetime and PyDateTime_CheckExact(o):             # <<<<<<<<<<<<<<
 *                 PyErr_Format(ValueError, b"can not serialize '%.200s' object where tzinfo=None", Py_TYPE(o).tp_name)
 *             else:
 */
      goto __pyx_L6;
    }

    /* "msgpack/_packer.pyx":291
 *                 PyErr_Format(ValueError, b"can not serialize '%.200s' object where tzinfo=None", Py_TYPE(o).tp_name)
 *             else:
 *                 PyErr_Format(TypeError, b"can not serialize '%.200s' object", Py_TYPE(o).tp_name)             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
    /*else*/ {
      __pyx_t_26 = PyErr_Format(__pyx_builtin_TypeError, ((char *)"can not serialize '%.200s' object"), Py_TYPE(__pyx_v_o)->tp_name); if (unlikely(__pyx_t_26 == ((PyObject *)NULL))) __PYX_ERR(0, 291, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "msgpack/_packer.pyx":292
 *             else:
 *                 PyErr_Format(TypeError, b"can not serialize '%.200s' object", Py_TYPE(o).tp_name)
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef pack(self, object obj):
 */
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;
    __pyx_L4_continue:;
  }

  /* "msgpack/_packer.pyx":147
 *         self.pk.buf = NULL
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer._pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_oe);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_delta);
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":294
 *             return ret
 * 
 *     cpdef pack(self, object obj):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         try:
 */

static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_7pack(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7msgpack_9_cmsgpack_6Packer_pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_skip_dispatch) {
  int __pyx_v_ret;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  struct __pyx_opt_args_7msgpack_9_cmsgpack_6Packer__pack __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7msgpack_9_cmsgpack_6Packer_7pack)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_obj};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "msgpack/_packer.pyx":296
 *     cpdef pack(self, object obj):
 *         cdef int ret
 *         try:             # <<<<<<<<<<<<<<
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "msgpack/_packer.pyx":297
 *         cdef int ret
 *         try:
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)             # <<<<<<<<<<<<<<
 *         except:
 *             self.pk.length = 0
 */
      __pyx_t_9.__pyx_n = 1;
      __pyx_t_9.nest_limit = __pyx_v_7msgpack_9_cmsgpack_DEFAULT_RECURSE_LIMIT;
      __pyx_t_5 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_obj, &__pyx_t_9); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 297, __pyx_L3_error)
      __pyx_v_ret = __pyx_t_5;

      /* "msgpack/_packer.pyx":296
 *     cpdef pack(self, object obj):
 *         cdef int ret
 *         try:             # <<<<<<<<<<<<<<
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         except:
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "msgpack/_packer.pyx":298
 *         try:
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         except:             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             raise
 */
    /*except:*/ {
      __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 298, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);

      /* "msgpack/_packer.pyx":299
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         except:
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             raise
 *         if ret:  # should not happen.
 */
      __pyx_v_self->pk.length = 0;

      /* "msgpack/_packer.pyx":300
 *         except:
 *             self.pk.length = 0
 *             raise             # <<<<<<<<<<<<<<
 *         if ret:  # should not happen.
 *             raise RuntimeError("internal error")
 */
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
      __PYX_ERR(0, 300, __pyx_L5_except_error)
    }

    /* "msgpack/_packer.pyx":296
 *     cpdef pack(self, object obj):
 *         cdef int ret
 *         try:             # <<<<<<<<<<<<<<
 *             ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         except:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "msgpack/_packer.pyx":301
 *             self.pk.length = 0
 *             raise
 *         if ret:  # should not happen.             # <<<<<<<<<<<<<<
 *             raise RuntimeError("internal error")
 *         if self.autoreset:
 */
  __pyx_t_10 = (__pyx_v_ret != 0);
  if (unlikely(__pyx_t_10)) {

    /* "msgpack/_packer.pyx":302
 *             raise
 *         if ret:  # should not happen.
 *             raise RuntimeError("internal error")             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 302, __pyx_L1_error)

    /* "msgpack/_packer.pyx":301
 *             self.pk.length = 0
 *             raise
 *         if ret:  # should not happen.             # <<<<<<<<<<<<<<
 *             raise RuntimeError("internal error")
 *         if self.autoreset:
 */
  }

  /* "msgpack/_packer.pyx":303
 *         if ret:  # should not happen.
 *             raise RuntimeError("internal error")
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":304
 *             raise RuntimeError("internal error")
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */
    __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_buf = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "msgpack/_packer.pyx":305
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":306
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_ext_type(self, typecode, data):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_buf);
    __pyx_r = __pyx_v_buf;
    goto __pyx_L0;

    /* "msgpack/_packer.pyx":303
 *         if ret:  # should not happen.
 *             raise RuntimeError("internal error")
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  }

  /* "msgpack/_packer.pyx":294
 *             return ret
 * 
 *     cpdef pack(self, object obj):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_7pack(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_6pack, "Packer.pack(self, obj)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_7pack = {"pack", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_7pack, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_6pack};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_7pack(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_obj = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 294, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pack") < 0)) __PYX_ERR(0, 294, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_obj = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 294, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_6pack(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_obj);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_6pack(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7msgpack_9_cmsgpack_6Packer_pack(__pyx_v_self, __pyx_v_obj, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":308
 *             return buf
 * 
 *     def pack_ext_type(self, typecode, data):             # <<<<<<<<<<<<<<
 *         msgpack_pack_ext(&self.pk, typecode, len(data))
 *         msgpack_pack_raw_body(&self.pk, data, len(data))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_9pack_ext_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_8pack_ext_type, "Packer.pack_ext_type(self, typecode, data)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_9pack_ext_type = {"pack_ext_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_9pack_ext_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_8pack_ext_type};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_9pack_ext_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_typecode = 0;
  PyObject *__pyx_v_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_ext_type (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 308, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_typecode,&__pyx_n_s_data,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_typecode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("pack_ext_type", 1, 2, 2, 1); __PYX_ERR(0, 308, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pack_ext_type") < 0)) __PYX_ERR(0, 308, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_typecode = values[0];
    __pyx_v_data = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_ext_type", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 308, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_ext_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_8pack_ext_type(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_typecode, __pyx_v_data);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_8pack_ext_type(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_typecode, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_ext_type", 0);

  /* "msgpack/_packer.pyx":309
 * 
 *     def pack_ext_type(self, typecode, data):
 *         msgpack_pack_ext(&self.pk, typecode, len(data))             # <<<<<<<<<<<<<<
 *         msgpack_pack_raw_body(&self.pk, data, len(data))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_char(__pyx_v_typecode); if (unlikely((__pyx_t_1 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 309, __pyx_L1_error)
  (void)(msgpack_pack_ext((&__pyx_v_self->pk), __pyx_t_1, __pyx_t_2));

  /* "msgpack/_packer.pyx":310
 *     def pack_ext_type(self, typecode, data):
 *         msgpack_pack_ext(&self.pk, typecode, len(data))
 *         msgpack_pack_raw_body(&self.pk, data, len(data))             # <<<<<<<<<<<<<<
 * 
 *     def pack_array_header(self, long long size):
 */
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_data); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 310, __pyx_L1_error)
  (void)(msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_t_3, __pyx_t_2));

  /* "msgpack/_packer.pyx":308
 *             return buf
 * 
 *     def pack_ext_type(self, typecode, data):             # <<<<<<<<<<<<<<
 *         msgpack_pack_ext(&self.pk, typecode, len(data))
 *         msgpack_pack_raw_body(&self.pk, data, len(data))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_ext_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":312
 *         msgpack_pack_raw_body(&self.pk, data, len(data))
 * 
 *     def pack_array_header(self, long long size):             # <<<<<<<<<<<<<<
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_11pack_array_header(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_10pack_array_header, "Packer.pack_array_header(self, long long size)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_11pack_array_header = {"pack_array_header", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_11pack_array_header, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_10pack_array_header};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_11pack_array_header(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PY_LONG_LONG __pyx_v_size;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_array_header (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 312, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pack_array_header") < 0)) __PYX_ERR(0, 312, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_size = __Pyx_PyInt_As_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_size == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_array_header", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 312, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_array_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_10pack_array_header(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_10pack_array_header(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PY_LONG_LONG __pyx_v_size) {
  int __pyx_v_ret;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_array_header", 0);

  /* "msgpack/_packer.pyx":313
 * 
 *     def pack_array_header(self, long long size):
 *         if size > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *             raise ValueError
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 */
  __pyx_t_1 = (__pyx_v_size > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":314
 *     def pack_array_header(self, long long size):
 *         if size > ITEM_LIMIT:
 *             raise ValueError             # <<<<<<<<<<<<<<
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 314, __pyx_L1_error)

    /* "msgpack/_packer.pyx":313
 * 
 *     def pack_array_header(self, long long size):
 *         if size > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *             raise ValueError
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 */
  }

  /* "msgpack/_packer.pyx":315
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 *         cdef int ret = msgpack_pack_array(&self.pk, size)             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */
  __pyx_v_ret = msgpack_pack_array((&__pyx_v_self->pk), __pyx_v_size);

  /* "msgpack/_packer.pyx":316
 *             raise ValueError
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  __pyx_t_1 = (__pyx_v_ret == -1L);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":317
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */
    PyErr_NoMemory(); __PYX_ERR(0, 317, __pyx_L1_error)

    /* "msgpack/_packer.pyx":316
 *             raise ValueError
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  }

  /* "msgpack/_packer.pyx":318
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  __pyx_t_1 = (__pyx_v_ret != 0);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":319
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 319, __pyx_L1_error)

    /* "msgpack/_packer.pyx":318
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  }

  /* "msgpack/_packer.pyx":320
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":321
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */
    __pyx_t_2 = PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_buf = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "msgpack/_packer.pyx":322
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":323
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_map_header(self, long long size):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_buf);
    __pyx_r = __pyx_v_buf;
    goto __pyx_L0;

    /* "msgpack/_packer.pyx":320
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  }

  /* "msgpack/_packer.pyx":312
 *         msgpack_pack_raw_body(&self.pk, data, len(data))
 * 
 *     def pack_array_header(self, long long size):             # <<<<<<<<<<<<<<
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_array_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":325
 *             return buf
 * 
 *     def pack_map_header(self, long long size):             # <<<<<<<<<<<<<<
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_13pack_map_header(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_12pack_map_header, "Packer.pack_map_header(self, long long size)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_13pack_map_header = {"pack_map_header", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_13pack_map_header, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_12pack_map_header};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_13pack_map_header(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PY_LONG_LONG __pyx_v_size;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_map_header (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 325, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pack_map_header") < 0)) __PYX_ERR(0, 325, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_size = __Pyx_PyInt_As_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_size == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_map_header", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 325, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_map_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_12pack_map_header(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_12pack_map_header(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PY_LONG_LONG __pyx_v_size) {
  int __pyx_v_ret;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_map_header", 0);

  /* "msgpack/_packer.pyx":326
 * 
 *     def pack_map_header(self, long long size):
 *         if size > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *             raise ValueError
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 */
  __pyx_t_1 = (__pyx_v_size > __pyx_v_7msgpack_9_cmsgpack_ITEM_LIMIT);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":327
 *     def pack_map_header(self, long long size):
 *         if size > ITEM_LIMIT:
 *             raise ValueError             # <<<<<<<<<<<<<<
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 327, __pyx_L1_error)

    /* "msgpack/_packer.pyx":326
 * 
 *     def pack_map_header(self, long long size):
 *         if size > ITEM_LIMIT:             # <<<<<<<<<<<<<<
 *             raise ValueError
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 */
  }

  /* "msgpack/_packer.pyx":328
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 *         cdef int ret = msgpack_pack_map(&self.pk, size)             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */
  __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_v_size);

  /* "msgpack/_packer.pyx":329
 *             raise ValueError
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  __pyx_t_1 = (__pyx_v_ret == -1L);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":330
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */
    PyErr_NoMemory(); __PYX_ERR(0, 330, __pyx_L1_error)

    /* "msgpack/_packer.pyx":329
 *             raise ValueError
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  }

  /* "msgpack/_packer.pyx":331
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  __pyx_t_1 = (__pyx_v_ret != 0);
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_packer.pyx":332
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 332, __pyx_L1_error)

    /* "msgpack/_packer.pyx":331
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  }

  /* "msgpack/_packer.pyx":333
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":334
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */
    __pyx_t_2 = PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_buf = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "msgpack/_packer.pyx":335
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":336
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_map_pairs(self, object pairs):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_buf);
    __pyx_r = __pyx_v_buf;
    goto __pyx_L0;

    /* "msgpack/_packer.pyx":333
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  }

  /* "msgpack/_packer.pyx":325
 *             return buf
 * 
 *     def pack_map_header(self, long long size):             # <<<<<<<<<<<<<<
 *         if size > ITEM_LIMIT:
 *             raise ValueError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_map_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":338
 *             return buf
 * 
 *     def pack_map_pairs(self, object pairs):             # <<<<<<<<<<<<<<
 *         """
 *         Pack *pairs* as msgpack map type.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_15pack_map_pairs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_14pack_map_pairs, "Packer.pack_map_pairs(self, pairs)\n\n        Pack *pairs* as msgpack map type.\n\n        *pairs* should be a sequence of pairs.\n        (`len(pairs)` and `for k, v in pairs:` should be supported.)\n        ");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_15pack_map_pairs = {"pack_map_pairs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_15pack_map_pairs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_14pack_map_pairs};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_15pack_map_pairs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pairs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_map_pairs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 338, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pairs,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pairs)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pack_map_pairs") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_pairs = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_map_pairs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 338, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_map_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_14pack_map_pairs(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v_pairs);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_14pack_map_pairs(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, PyObject *__pyx_v_pairs) {
  int __pyx_v_ret;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_map_pairs", 0);

  /* "msgpack/_packer.pyx":345
 *         (`len(pairs)` and `for k, v in pairs:` should be supported.)
 *         """
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))             # <<<<<<<<<<<<<<
 *         if ret == 0:
 *             for k, v in pairs:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pairs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_t_1);

  /* "msgpack/_packer.pyx":346
 *         """
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:             # <<<<<<<<<<<<<<
 *             for k, v in pairs:
 *                 ret = self._pack(k)
 */
  __pyx_t_2 = (__pyx_v_ret == 0);
  if (__pyx_t_2) {

    /* "msgpack/_packer.pyx":347
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:
 *             for k, v in pairs:             # <<<<<<<<<<<<<<
 *                 ret = self._pack(k)
 *                 if ret != 0: break
 */
    if (likely(PyList_CheckExact(__pyx_v_pairs)) || PyTuple_CheckExact(__pyx_v_pairs)) {
      __pyx_t_3 = __pyx_v_pairs; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_pairs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 347, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 347, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 347, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 347, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 347, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "msgpack/_packer.pyx":348
 *         if ret == 0:
 *             for k, v in pairs:
 *                 ret = self._pack(k)             # <<<<<<<<<<<<<<
 *                 if ret != 0: break
 *                 ret = self._pack(v)
 */
      __pyx_t_10 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, NULL); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 348, __pyx_L1_error)
      __pyx_v_ret = __pyx_t_10;

      /* "msgpack/_packer.pyx":349
 *             for k, v in pairs:
 *                 ret = self._pack(k)
 *                 if ret != 0: break             # <<<<<<<<<<<<<<
 *                 ret = self._pack(v)
 *                 if ret != 0: break
 */
      __pyx_t_2 = (__pyx_v_ret != 0);
      if (__pyx_t_2) {
        goto __pyx_L5_break;
      }

      /* "msgpack/_packer.pyx":350
 *                 ret = self._pack(k)
 *                 if ret != 0: break
 *                 ret = self._pack(v)             # <<<<<<<<<<<<<<
 *                 if ret != 0: break
 *         if ret == -1:
 */
      __pyx_t_10 = ((struct __pyx_vtabstruct_7msgpack_9_cmsgpack_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, NULL); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 350, __pyx_L1_error)
      __pyx_v_ret = __pyx_t_10;

      /* "msgpack/_packer.pyx":351
 *                 if ret != 0: break
 *                 ret = self._pack(v)
 *                 if ret != 0: break             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */
      __pyx_t_2 = (__pyx_v_ret != 0);
      if (__pyx_t_2) {
        goto __pyx_L5_break;
      }

      /* "msgpack/_packer.pyx":347
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:
 *             for k, v in pairs:             # <<<<<<<<<<<<<<
 *                 ret = self._pack(k)
 *                 if ret != 0: break
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_for_end;
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_for_end;
    __pyx_L10_for_end:;

    /* "msgpack/_packer.pyx":346
 *         """
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:             # <<<<<<<<<<<<<<
 *             for k, v in pairs:
 *                 ret = self._pack(k)
 */
  }

  /* "msgpack/_packer.pyx":352
 *                 ret = self._pack(v)
 *                 if ret != 0: break
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  __pyx_t_2 = (__pyx_v_ret == -1L);
  if (unlikely(__pyx_t_2)) {

    /* "msgpack/_packer.pyx":353
 *                 if ret != 0: break
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */
    PyErr_NoMemory(); __PYX_ERR(0, 353, __pyx_L1_error)

    /* "msgpack/_packer.pyx":352
 *                 ret = self._pack(v)
 *                 if ret != 0: break
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */
  }

  /* "msgpack/_packer.pyx":354
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  __pyx_t_2 = (__pyx_v_ret != 0);
  if (unlikely(__pyx_t_2)) {

    /* "msgpack/_packer.pyx":355
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 355, __pyx_L1_error)

    /* "msgpack/_packer.pyx":354
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */
  }

  /* "msgpack/_packer.pyx":356
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":357
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */
    __pyx_t_3 = PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_buf = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "msgpack/_packer.pyx":358
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":359
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_buf);
    __pyx_r = __pyx_v_buf;
    goto __pyx_L0;

    /* "msgpack/_packer.pyx":356
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */
  }

  /* "msgpack/_packer.pyx":338
 *             return buf
 * 
 *     def pack_map_pairs(self, object pairs):             # <<<<<<<<<<<<<<
 *         """
 *         Pack *pairs* as msgpack map type.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.pack_map_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":361
 *             return buf
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Reset internal buffer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_17reset(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_16reset, "Packer.reset(self)\nReset internal buffer.\n\n        This method is useful only when autoreset=False.\n        ");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_17reset = {"reset", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_17reset, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_16reset};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_17reset(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 361, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("reset", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "reset", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_16reset(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_16reset(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "msgpack/_packer.pyx":366
 *         This method is useful only when autoreset=False.
 *         """
 *         self.pk.length = 0             # <<<<<<<<<<<<<<
 * 
 *     def bytes(self):
 */
  __pyx_v_self->pk.length = 0;

  /* "msgpack/_packer.pyx":361
 *             return buf
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Reset internal buffer.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":368
 *         self.pk.length = 0
 * 
 *     def bytes(self):             # <<<<<<<<<<<<<<
 *         """Return internal buffer contents as bytes object"""
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_19bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_18bytes, "Packer.bytes(self)\nReturn internal buffer contents as bytes object");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_19bytes = {"bytes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_19bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_18bytes};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_19bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bytes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 368, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("bytes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "bytes", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_18bytes(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_18bytes(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes", 0);

  /* "msgpack/_packer.pyx":370
 *     def bytes(self):
 *         """Return internal buffer contents as bytes object"""
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 * 
 *     def getbuffer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "msgpack/_packer.pyx":368
 *         self.pk.length = 0
 * 
 *     def bytes(self):             # <<<<<<<<<<<<<<
 *         """Return internal buffer contents as bytes object"""
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":372
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 * 
 *     def getbuffer(self):             # <<<<<<<<<<<<<<
 *         """Return view of internal buffer."""
 *         return buff_to_buff(self.pk.buf, self.pk.length)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_21getbuffer(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_20getbuffer, "Packer.getbuffer(self)\nReturn view of internal buffer.");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_21getbuffer = {"getbuffer", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_21getbuffer, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_20getbuffer};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_21getbuffer(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getbuffer (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 372, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getbuffer", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getbuffer", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.getbuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_20getbuffer(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_20getbuffer(struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getbuffer", 0);

  /* "msgpack/_packer.pyx":374
 *     def getbuffer(self):
 *         """Return view of internal buffer."""
 *         return buff_to_buff(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = buff_to_buff(__pyx_v_self->pk.buf, __pyx_v_self->pk.length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "msgpack/_packer.pyx":372
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 * 
 *     def getbuffer(self):             # <<<<<<<<<<<<<<
 *         """Return view of internal buffer."""
 *         return buff_to_buff(self.pk.buf, self.pk.length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.getbuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_22__reduce_cython__, "Packer.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_22__reduce_cython__};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(4, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_22__reduce_cython__(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_6Packer_24__setstate_cython__, "Packer.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_6Packer_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_6Packer_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_6Packer_24__setstate_cython__};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_6Packer_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(4, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(4, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(4, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_6Packer_24__setstate_cython__(((struct __pyx_obj_7msgpack_9_cmsgpack_Packer *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_6Packer_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7msgpack_9_cmsgpack_Packer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("msgpack._cmsgpack.Packer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_unpacker.pyx":60
 *     void unpack_clear(unpack_context* ctx)
 * 
 * cdef inline init_ctx(unpack_context *ctx,             # <<<<<<<<<<<<<<
 *                      object object_hook, object object_pairs_hook,
 *                      object list_hook, object ext_hook,
 */

static CYTHON_INLINE PyObject *__pyx_f_7msgpack_9_cmsgpack_init_ctx(unpack_context *__pyx_v_ctx, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_list_hook, PyObject *__pyx_v_ext_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_timestamp, int __pyx_v_strict_map_key, char const *__pyx_v_unicode_errors, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_ctx", 0);

  /* "msgpack/_unpacker.pyx":69
 *                      Py_ssize_t max_array_len, Py_ssize_t max_map_len,
 *                      Py_ssize_t max_ext_len):
 *     unpack_init(ctx)             # <<<<<<<<<<<<<<
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw
 */
  unpack_init(__pyx_v_ctx);

  /* "msgpack/_unpacker.pyx":70
 *                      Py_ssize_t max_ext_len):
 *     unpack_init(ctx)
 *     ctx.user.use_list = use_list             # <<<<<<<<<<<<<<
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key
 */
  __pyx_v_ctx->user.use_list = __pyx_v_use_list;

  /* "msgpack/_unpacker.pyx":71
 *     unpack_init(ctx)
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw             # <<<<<<<<<<<<<<
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 */
  __pyx_v_ctx->user.raw = __pyx_v_raw;

  /* "msgpack/_unpacker.pyx":72
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key             # <<<<<<<<<<<<<<
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len
 */
  __pyx_v_ctx->user.strict_map_key = __pyx_v_strict_map_key;

  /* "msgpack/_unpacker.pyx":73
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL             # <<<<<<<<<<<<<<
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len
 */
  __pyx_v_ctx->user.object_hook = ((PyObject *)NULL);
  __pyx_v_ctx->user.list_hook = ((PyObject *)NULL);

  /* "msgpack/_unpacker.pyx":74
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len
 */
  __pyx_v_ctx->user.max_str_len = __pyx_v_max_str_len;

  /* "msgpack/_unpacker.pyx":75
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len
 */
  __pyx_v_ctx->user.max_bin_len = __pyx_v_max_bin_len;

  /* "msgpack/_unpacker.pyx":76
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_map_len = max_map_len
 *     ctx.user.max_ext_len = max_ext_len
 */
  __pyx_v_ctx->user.max_array_len = __pyx_v_max_array_len;

  /* "msgpack/_unpacker.pyx":77
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_ext_len = max_ext_len
 * 
 */
  __pyx_v_ctx->user.max_map_len = __pyx_v_max_map_len;

  /* "msgpack/_unpacker.pyx":78
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len
 *     ctx.user.max_ext_len = max_ext_len             # <<<<<<<<<<<<<<
 * 
 *     if object_hook is not None and object_pairs_hook is not None:
 */
  __pyx_v_ctx->user.max_ext_len = __pyx_v_max_ext_len;

  /* "msgpack/_unpacker.pyx":80
 *     ctx.user.max_ext_len = max_ext_len
 * 
 *     if object_hook is not None and object_pairs_hook is not None:             # <<<<<<<<<<<<<<
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 */
  __pyx_t_2 = (__pyx_v_object_hook != Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_object_pairs_hook != Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_unpacker.pyx":81
 * 
 *     if object_hook is not None and object_pairs_hook is not None:
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")             # <<<<<<<<<<<<<<
 * 
 *     if object_hook is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 81, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":80
 *     ctx.user.max_ext_len = max_ext_len
 * 
 *     if object_hook is not None and object_pairs_hook is not None:             # <<<<<<<<<<<<<<
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 */
  }

  /* "msgpack/_unpacker.pyx":83
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 *     if object_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_object_hook != Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":84
 * 
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook
 */
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_object_hook));
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_unpacker.pyx":85
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 85, __pyx_L1_error)

      /* "msgpack/_unpacker.pyx":84
 * 
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook
 */
    }

    /* "msgpack/_unpacker.pyx":86
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook             # <<<<<<<<<<<<<<
 * 
 *     if object_pairs_hook is None:
 */
    __pyx_v_ctx->user.object_hook = ((PyObject *)__pyx_v_object_hook);

    /* "msgpack/_unpacker.pyx":83
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 *     if object_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 */
  }

  /* "msgpack/_unpacker.pyx":88
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 *     if object_pairs_hook is None:             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = False
 *     else:
 */
  __pyx_t_1 = (__pyx_v_object_pairs_hook == Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":89
 * 
 *     if object_pairs_hook is None:
 *         ctx.user.has_pairs_hook = False             # <<<<<<<<<<<<<<
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):
 */
    __pyx_v_ctx->user.has_pairs_hook = 0;

    /* "msgpack/_unpacker.pyx":88
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 *     if object_pairs_hook is None:             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = False
 *     else:
 */
    goto __pyx_L8;
  }

  /* "msgpack/_unpacker.pyx":91
 *         ctx.user.has_pairs_hook = False
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 */
  /*else*/ {
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_object_pairs_hook));
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_unpacker.pyx":92
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):
 *             raise TypeError("object_pairs_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 *         ctx.user.has_pairs_hook = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 92, __pyx_L1_error)

      /* "msgpack/_unpacker.pyx":91
 *         ctx.user.has_pairs_hook = False
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 */
    }

    /* "msgpack/_unpacker.pyx":93
 *         if not PyCallable_Check(object_pairs_hook):
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = True
 * 
 */
    __pyx_v_ctx->user.object_hook = ((PyObject *)__pyx_v_object_pairs_hook);

    /* "msgpack/_unpacker.pyx":94
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 *         ctx.user.has_pairs_hook = True             # <<<<<<<<<<<<<<
 * 
 *     if list_hook is not None:
 */
    __pyx_v_ctx->user.has_pairs_hook = 1;
  }
  __pyx_L8:;

  /* "msgpack/_unpacker.pyx":96
 *         ctx.user.has_pairs_hook = True
 * 
 *     if list_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_list_hook != Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":97
 * 
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook
 */
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_list_hook));
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_unpacker.pyx":98
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 98, __pyx_L1_error)

      /* "msgpack/_unpacker.pyx":97
 * 
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook
 */
    }

    /* "msgpack/_unpacker.pyx":99
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook             # <<<<<<<<<<<<<<
 * 
 *     if ext_hook is not None:
 */
    __pyx_v_ctx->user.list_hook = ((PyObject *)__pyx_v_list_hook);

    /* "msgpack/_unpacker.pyx":96
 *         ctx.user.has_pairs_hook = True
 * 
 *     if list_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 */
  }

  /* "msgpack/_unpacker.pyx":101
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 *     if ext_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_ext_hook != Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":102
 * 
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 */
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_ext_hook));
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_unpacker.pyx":103
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 103, __pyx_L1_error)

      /* "msgpack/_unpacker.pyx":102
 * 
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 */
    }

    /* "msgpack/_unpacker.pyx":104
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook             # <<<<<<<<<<<<<<
 * 
 *     if timestamp < 0 or 3 < timestamp:
 */
    __pyx_v_ctx->user.ext_hook = ((PyObject *)__pyx_v_ext_hook);

    /* "msgpack/_unpacker.pyx":101
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 *     if ext_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 */
  }

  /* "msgpack/_unpacker.pyx":106
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 *     if timestamp < 0 or 3 < timestamp:             # <<<<<<<<<<<<<<
 *         raise ValueError("timestamp must be 0..3")
 * 
 */
  __pyx_t_2 = (__pyx_v_timestamp < 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = (3 < __pyx_v_timestamp);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "msgpack/_unpacker.pyx":107
 * 
 *     if timestamp < 0 or 3 < timestamp:
 *         raise ValueError("timestamp must be 0..3")             # <<<<<<<<<<<<<<
 * 
 *     # Add Timestamp type to the user object so it may be used in unpack.h
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 107, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":106
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 *     if timestamp < 0 or 3 < timestamp:             # <<<<<<<<<<<<<<
 *         raise ValueError("timestamp must be 0..3")
 * 
 */
  }

  /* "msgpack/_unpacker.pyx":110
 * 
 *     # Add Timestamp type to the user object so it may be used in unpack.h
 *     ctx.user.timestamp = timestamp             # <<<<<<<<<<<<<<
 *     ctx.user.timestamp_t = <PyObject*>Timestamp
 *     ctx.user.giga = <PyObject*>giga
 */
  __pyx_v_ctx->user.timestamp = __pyx_v_timestamp;

  /* "msgpack/_unpacker.pyx":111
 *     # Add Timestamp type to the user object so it may be used in unpack.h
 *     ctx.user.timestamp = timestamp
 *     ctx.user.timestamp_t = <PyObject*>Timestamp             # <<<<<<<<<<<<<<
 *     ctx.user.giga = <PyObject*>giga
 *     ctx.user.utc = <PyObject*>utc
 */
  __pyx_v_ctx->user.timestamp_t = ((PyObject *)__pyx_v_7msgpack_9_cmsgpack_Timestamp);

  /* "msgpack/_unpacker.pyx":112
 *     ctx.user.timestamp = timestamp
 *     ctx.user.timestamp_t = <PyObject*>Timestamp
 *     ctx.user.giga = <PyObject*>giga             # <<<<<<<<<<<<<<
 *     ctx.user.utc = <PyObject*>utc
 *     ctx.user.unicode_errors = unicode_errors
 */
  __pyx_v_ctx->user.giga = ((PyObject *)__pyx_v_7msgpack_9_cmsgpack_giga);

  /* "msgpack/_unpacker.pyx":113
 *     ctx.user.timestamp_t = <PyObject*>Timestamp
 *     ctx.user.giga = <PyObject*>giga
 *     ctx.user.utc = <PyObject*>utc             # <<<<<<<<<<<<<<
 *     ctx.user.unicode_errors = unicode_errors
 * 
 */
  __pyx_v_ctx->user.utc = ((PyObject *)__pyx_v_7msgpack_9_cmsgpack_utc);

  /* "msgpack/_unpacker.pyx":114
 *     ctx.user.giga = <PyObject*>giga
 *     ctx.user.utc = <PyObject*>utc
 *     ctx.user.unicode_errors = unicode_errors             # <<<<<<<<<<<<<<
 * 
 * def default_read_extended_type(typecode, data):
 */
  __pyx_v_ctx->user.unicode_errors = __pyx_v_unicode_errors;

  /* "msgpack/_unpacker.pyx":60
 *     void unpack_clear(unpack_context* ctx)
 * 
 * cdef inline init_ctx(unpack_context *ctx,             # <<<<<<<<<<<<<<
 *                      object object_hook, object object_pairs_hook,
 *                      object list_hook, object ext_hook,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("msgpack._cmsgpack.init_ctx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_unpacker.pyx":116
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_1default_read_extended_type(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_default_read_extended_type, "default_read_extended_type(typecode, data)");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_1default_read_extended_type = {"default_read_extended_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_1default_read_extended_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_default_read_extended_type};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_1default_read_extended_type(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_typecode = 0;
  CYTHON_UNUSED PyObject *__pyx_v_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_read_extended_type (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 116, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_typecode,&__pyx_n_s_data,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_typecode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 116, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 116, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("default_read_extended_type", 1, 2, 2, 1); __PYX_ERR(1, 116, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "default_read_extended_type") < 0)) __PYX_ERR(1, 116, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_typecode = values[0];
    __pyx_v_data = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("default_read_extended_type", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 116, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.default_read_extended_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_default_read_extended_type(__pyx_self, __pyx_v_typecode, __pyx_v_data);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_default_read_extended_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_typecode, CYTHON_UNUSED PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("default_read_extended_type", 0);

  /* "msgpack/_unpacker.pyx":117
 * 
 * def default_read_extended_type(typecode, data):
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int get_data_from_buffer(object obj,
 */
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_decode_extended_type_with, __pyx_v_typecode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 117, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":116
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.default_read_extended_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_unpacker.pyx":119
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 * cdef inline int get_data_from_buffer(object obj,             # <<<<<<<<<<<<<<
 *                                      Py_buffer *view,
 *                                      char **buf,
 */

static CYTHON_INLINE int __pyx_f_7msgpack_9_cmsgpack_get_data_from_buffer(PyObject *__pyx_v_obj, Py_buffer *__pyx_v_view, char **__pyx_v_buf, Py_ssize_t *__pyx_v_buffer_len) {
  PyObject *__pyx_v_contiguous = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_data_from_buffer", 0);

  /* "msgpack/_unpacker.pyx":125
 *     cdef object contiguous
 *     cdef Py_buffer tmp
 *     if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:             # <<<<<<<<<<<<<<
 *         raise
 *     if view.itemsize != 1:
 */
  __pyx_t_1 = PyObject_GetBuffer(__pyx_v_obj, __pyx_v_view, PyBUF_FULL_RO); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 125, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == -1L);
  if (unlikely(__pyx_t_2)) {

    /* "msgpack/_unpacker.pyx":126
 *     cdef Py_buffer tmp
 *     if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *         raise             # <<<<<<<<<<<<<<
 *     if view.itemsize != 1:
 *         PyBuffer_Release(view)
 */
    __Pyx_ReraiseException(); __PYX_ERR(1, 126, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":125
 *     cdef object contiguous
 *     cdef Py_buffer tmp
 *     if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:             # <<<<<<<<<<<<<<
 *         raise
 *     if view.itemsize != 1:
 */
  }

  /* "msgpack/_unpacker.pyx":127
 *     if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *         raise
 *     if view.itemsize != 1:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(view)
 *         raise BufferError("cannot unpack from multi-byte object")
 */
  __pyx_t_2 = (__pyx_v_view->itemsize != 1);
  if (unlikely(__pyx_t_2)) {

    /* "msgpack/_unpacker.pyx":128
 *         raise
 *     if view.itemsize != 1:
 *         PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *         raise BufferError("cannot unpack from multi-byte object")
 *     if PyBuffer_IsContiguous(view, b'A') == 0:
 */
    PyBuffer_Release(__pyx_v_view);

    /* "msgpack/_unpacker.pyx":129
 *     if view.itemsize != 1:
 *         PyBuffer_Release(view)
 *         raise BufferError("cannot unpack from multi-byte object")             # <<<<<<<<<<<<<<
 *     if PyBuffer_IsContiguous(view, b'A') == 0:
 *         PyBuffer_Release(view)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_BufferError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 129, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":127
 *     if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *         raise
 *     if view.itemsize != 1:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(view)
 *         raise BufferError("cannot unpack from multi-byte object")
 */
  }

  /* "msgpack/_unpacker.pyx":130
 *         PyBuffer_Release(view)
 *         raise BufferError("cannot unpack from multi-byte object")
 *     if PyBuffer_IsContiguous(view, b'A') == 0:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(view)
 *         # create a contiguous copy and get buffer
 */
  __pyx_t_2 = (PyBuffer_IsContiguous(__pyx_v_view, 'A') == 0);
  if (__pyx_t_2) {

    /* "msgpack/_unpacker.pyx":131
 *         raise BufferError("cannot unpack from multi-byte object")
 *     if PyBuffer_IsContiguous(view, b'A') == 0:
 *         PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *         # create a contiguous copy and get buffer
 *         contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')
 */
    PyBuffer_Release(__pyx_v_view);

    /* "msgpack/_unpacker.pyx":133
 *         PyBuffer_Release(view)
 *         # create a contiguous copy and get buffer
 *         contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')             # <<<<<<<<<<<<<<
 *         PyObject_GetBuffer(contiguous, view, PyBUF_SIMPLE)
 *         # view must hold the only reference to contiguous,
 */
    __pyx_t_3 = PyMemoryView_GetContiguous(__pyx_v_obj, PyBUF_READ, 'C'); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_contiguous = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "msgpack/_unpacker.pyx":134
 *         # create a contiguous copy and get buffer
 *         contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')
 *         PyObject_GetBuffer(contiguous, view, PyBUF_SIMPLE)             # <<<<<<<<<<<<<<
 *         # view must hold the only reference to contiguous,
 *         # so memory is freed when view is released
 */
    __pyx_t_1 = PyObject_GetBuffer(__pyx_v_contiguous, __pyx_v_view, PyBUF_SIMPLE); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 134, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":137
 *         # view must hold the only reference to contiguous,
 *         # so memory is freed when view is released
 *         Py_DECREF(contiguous)             # <<<<<<<<<<<<<<
 *     buffer_len[0] = view.len
 *     buf[0] = <char*> view.buf
 */
    Py_DECREF(__pyx_v_contiguous);

    /* "msgpack/_unpacker.pyx":130
 *         PyBuffer_Release(view)
 *         raise BufferError("cannot unpack from multi-byte object")
 *     if PyBuffer_IsContiguous(view, b'A') == 0:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(view)
 *         # create a contiguous copy and get buffer
 */
  }

  /* "msgpack/_unpacker.pyx":138
 *         # so memory is freed when view is released
 *         Py_DECREF(contiguous)
 *     buffer_len[0] = view.len             # <<<<<<<<<<<<<<
 *     buf[0] = <char*> view.buf
 *     return 1
 */
  __pyx_t_4 = __pyx_v_view->len;
  (__pyx_v_buffer_len[0]) = __pyx_t_4;

  /* "msgpack/_unpacker.pyx":139
 *         Py_DECREF(contiguous)
 *     buffer_len[0] = view.len
 *     buf[0] = <char*> view.buf             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  (__pyx_v_buf[0]) = ((char *)__pyx_v_view->buf);

  /* "msgpack/_unpacker.pyx":140
 *     buffer_len[0] = view.len
 *     buf[0] = <char*> view.buf
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "msgpack/_unpacker.pyx":119
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 * cdef inline int get_data_from_buffer(object obj,             # <<<<<<<<<<<<<<
 *                                      Py_buffer *view,
 *                                      char **buf,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("msgpack._cmsgpack.get_data_from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_contiguous);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_unpacker.pyx":143
 * 
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 */

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_4__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(14); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_object_hook, Py_None) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_list_hook, Py_None) < 0) __PYX_ERR(1, 143, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":144
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,             # <<<<<<<<<<<<<<
 *             unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_use_list, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_raw, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_timestamp, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_strict_map_key, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":145
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,             # <<<<<<<<<<<<<<
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=-1,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_unicode_errors, Py_None) < 0) __PYX_ERR(1, 143, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":146
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_str_len=-1,
 *             Py_ssize_t max_bin_len=-1,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_object_pairs_hook, Py_None) < 0) __PYX_ERR(1, 143, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":143
 * 
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ext_hook, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_ext_hook) < 0) __PYX_ERR(1, 143, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":147
 *             unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=-1,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_bin_len=-1,
 *             Py_ssize_t max_array_len=-1,
 */
  __pyx_t_2 = PyInt_FromSsize_t(((Py_ssize_t)-1L)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_str_len, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":148
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=-1,
 *             Py_ssize_t max_bin_len=-1,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_array_len=-1,
 *             Py_ssize_t max_map_len=-1,
 */
  __pyx_t_2 = PyInt_FromSsize_t(((Py_ssize_t)-1L)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_bin_len, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":149
 *             Py_ssize_t max_str_len=-1,
 *             Py_ssize_t max_bin_len=-1,
 *             Py_ssize_t max_array_len=-1,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_map_len=-1,
 *             Py_ssize_t max_ext_len=-1):
 */
  __pyx_t_2 = PyInt_FromSsize_t(((Py_ssize_t)-1L)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_array_len, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":150
 *             Py_ssize_t max_bin_len=-1,
 *             Py_ssize_t max_array_len=-1,
 *             Py_ssize_t max_map_len=-1,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_ext_len=-1):
 *     """
 */
  __pyx_t_2 = PyInt_FromSsize_t(((Py_ssize_t)-1L)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_map_len, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":151
 *             Py_ssize_t max_array_len=-1,
 *             Py_ssize_t max_map_len=-1,
 *             Py_ssize_t max_ext_len=-1):             # <<<<<<<<<<<<<<
 *     """
 *     Unpack packed_bytes to object. Returns an unpacked object.
 */
  __pyx_t_2 = PyInt_FromSsize_t(((Py_ssize_t)-1L)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_ext_len, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_unpacker.pyx":143
 * 
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, Py_None)) __PYX_ERR(1, 143, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msgpack._cmsgpack.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_3unpackb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7msgpack_9_cmsgpack_2unpackb, "unpackb(packed, *, object_hook=None, list_hook=None, bool use_list=True, bool raw=False, int timestamp=0, bool strict_map_key=True, unicode_errors=None, object_pairs_hook=None, ext_hook=ExtType, Py_ssize_t max_str_len=-1, Py_ssize_t max_bin_len=-1, Py_ssize_t max_array_len=-1, Py_ssize_t max_map_len=-1, Py_ssize_t max_ext_len=-1)\n\n    Unpack packed_bytes to object. Returns an unpacked object.\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``ValueError`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n\n    See :class:`Unpacker` for options.\n\n    *max_xxx_len* options are configured automatically from ``len(packed)``.\n    ");
static PyMethodDef __pyx_mdef_7msgpack_9_cmsgpack_3unpackb = {"unpackb", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7msgpack_9_cmsgpack_3unpackb, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7msgpack_9_cmsgpack_2unpackb};
static PyObject *__pyx_pw_7msgpack_9_cmsgpack_3unpackb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_packed = 0;
  PyObject *__pyx_v_object_hook = 0;
  PyObject *__pyx_v_list_hook = 0;
  int __pyx_v_use_list;
  int __pyx_v_raw;
  int __pyx_v_timestamp;
  int __pyx_v_strict_map_key;
  PyObject *__pyx_v_unicode_errors = 0;
  PyObject *__pyx_v_object_pairs_hook = 0;
  PyObject *__pyx_v_ext_hook = 0;
  Py_ssize_t __pyx_v_max_str_len;
  Py_ssize_t __pyx_v_max_bin_len;
  Py_ssize_t __pyx_v_max_array_len;
  Py_ssize_t __pyx_v_max_map_len;
  Py_ssize_t __pyx_v_max_ext_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpackb (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 143, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_packed,&__pyx_n_s_object_hook,&__pyx_n_s_list_hook,&__pyx_n_s_use_list,&__pyx_n_s_raw,&__pyx_n_s_timestamp,&__pyx_n_s_strict_map_key,&__pyx_n_s_unicode_errors,&__pyx_n_s_object_pairs_hook,&__pyx_n_s_ext_hook,&__pyx_n_s_max_str_len,&__pyx_n_s_max_bin_len,&__pyx_n_s_max_array_len,&__pyx_n_s_max_map_len,&__pyx_n_s_max_ext_len,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "msgpack/_unpacker.pyx":145
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,             # <<<<<<<<<<<<<<
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=-1,
 */
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "msgpack/_unpacker.pyx":146
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_str_len=-1,
 *             Py_ssize_t max_bin_len=-1,
 */
    values[8] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[9] = __Pyx_Arg_NewRef_FASTCALL(__pyx_dynamic_args->__pyx_arg_ext_hook);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_packed)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 14)) {
        Py_ssize_t index;
        for (index = 1; index < 15 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "unpackb") < 0)) __PYX_ERR(1, 143, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_packed = values[0];
    __pyx_v_object_hook = values[1];
    __pyx_v_list_hook = values[2];
    if (values[3]) {
      __pyx_v_use_list = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_use_list == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L3_error)
    } else {
      __pyx_v_use_list = ((int)((int)1));
    }
    if (values[4]) {
      __pyx_v_raw = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_raw == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L3_error)
    } else {
      __pyx_v_raw = ((int)((int)0));
    }
    if (values[5]) {
      __pyx_v_timestamp = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_timestamp == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L3_error)
    } else {
      __pyx_v_timestamp = ((int)((int)0));
    }
    if (values[6]) {
      __pyx_v_strict_map_key = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_strict_map_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L3_error)
    } else {
      __pyx_v_strict_map_key = ((int)((int)1));
    }
    __pyx_v_unicode_errors = values[7];
    __pyx_v_object_pairs_hook = values[8];
    __pyx_v_ext_hook = values[9];
    if (values[10]) {
      __pyx_v_max_str_len = __Pyx_PyIndex_AsSsize_t(values[10]); if (unlikely((__pyx_v_max_str_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L3_error)
    } else {
      __pyx_v_max_str_len = ((Py_ssize_t)((Py_ssize_t)-1L));
    }
    if (values[11]) {
      __pyx_v_max_bin_len = __Pyx_PyIndex_AsSsize_t(values[11]); if (unlikely((__pyx_v_max_bin_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 148, __pyx_L3_error)
    } else {
      __pyx_v_max_bin_len = ((Py_ssize_t)((Py_ssize_t)-1L));
    }
    if (values[12]) {
      __pyx_v_max_array_len = __Pyx_PyIndex_AsSsize_t(values[12]); if (unlikely((__pyx_v_max_array_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L3_error)
    } else {
      __pyx_v_max_array_len = ((Py_ssize_t)((Py_ssize_t)-1L));
    }
    if (values[13]) {
      __pyx_v_max_map_len = __Pyx_PyIndex_AsSsize_t(values[13]); if (unlikely((__pyx_v_max_map_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 150, __pyx_L3_error)
    } else {
      __pyx_v_max_map_len = ((Py_ssize_t)((Py_ssize_t)-1L));
    }
    if (values[14]) {
      __pyx_v_max_ext_len = __Pyx_PyIndex_AsSsize_t(values[14]); if (unlikely((__pyx_v_max_ext_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L3_error)
    } else {
      __pyx_v_max_ext_len = ((Py_ssize_t)((Py_ssize_t)-1L));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpackb", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 143, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msgpack._cmsgpack.unpackb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7msgpack_9_cmsgpack_2unpackb(__pyx_self, __pyx_v_packed, __pyx_v_object_hook, __pyx_v_list_hook, __pyx_v_use_list, __pyx_v_raw, __pyx_v_timestamp, __pyx_v_strict_map_key, __pyx_v_unicode_errors, __pyx_v_object_pairs_hook, __pyx_v_ext_hook, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len);

  /* "msgpack/_unpacker.pyx":143
 * 
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7msgpack_9_cmsgpack_2unpackb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_packed, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_list_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_timestamp, int __pyx_v_strict_map_key, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len) {
  unpack_context __pyx_v_ctx;
  Py_ssize_t __pyx_v_off;
  int __pyx_v_ret;
  Py_buffer __pyx_v_view;
  char *__pyx_v_buf;
  Py_ssize_t __pyx_v_buf_len;
  char const *__pyx_v_cerr;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpackb", 0);

  /* "msgpack/_unpacker.pyx":166
 *     """
 *     cdef unpack_context ctx
 *     cdef Py_ssize_t off = 0             # <<<<<<<<<<<<<<
 *     cdef int ret
 * 
 */
  __pyx_v_off = 0;

  /* "msgpack/_unpacker.pyx":170
 * 
 *     cdef Py_buffer view
 *     cdef char* buf = NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t buf_len
 *     cdef const char* cerr = NULL
 */
  __pyx_v_buf = NULL;

  /* "msgpack/_unpacker.pyx":172
 *     cdef char* buf = NULL
 *     cdef Py_ssize_t buf_len
 *     cdef const char* cerr = NULL             # <<<<<<<<<<<<<<
 * 
 *     if unicode_errors is not None:
 */
  __pyx_v_cerr = NULL;

  /* "msgpack/_unpacker.pyx":174
 *     cdef const char* cerr = NULL
 * 
 *     if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *         cerr = unicode_errors
 * 
 */
  __pyx_t_1 = (__pyx_v_unicode_errors != Py_None);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":175
 * 
 *     if unicode_errors is not None:
 *         cerr = unicode_errors             # <<<<<<<<<<<<<<
 * 
 *     get_data_from_buffer(packed, &view, &buf, &buf_len)
 */
    __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_unicode_errors); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
    __pyx_v_cerr = __pyx_t_2;

    /* "msgpack/_unpacker.pyx":174
 *     cdef const char* cerr = NULL
 * 
 *     if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *         cerr = unicode_errors
 * 
 */
  }

  /* "msgpack/_unpacker.pyx":177
 *         cerr = unicode_errors
 * 
 *     get_data_from_buffer(packed, &view, &buf, &buf_len)             # <<<<<<<<<<<<<<
 * 
 *     if max_str_len == -1:
 */
  __pyx_t_3 = __pyx_f_7msgpack_9_cmsgpack_get_data_from_buffer(__pyx_v_packed, (&__pyx_v_view), (&__pyx_v_buf), (&__pyx_v_buf_len)); if (unlikely(__pyx_t_3 == ((int)0))) __PYX_ERR(1, 177, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":179
 *     get_data_from_buffer(packed, &view, &buf, &buf_len)
 * 
 *     if max_str_len == -1:             # <<<<<<<<<<<<<<
 *         max_str_len = buf_len
 *     if max_bin_len == -1:
 */
  __pyx_t_1 = (__pyx_v_max_str_len == -1L);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":180
 * 
 *     if max_str_len == -1:
 *         max_str_len = buf_len             # <<<<<<<<<<<<<<
 *     if max_bin_len == -1:
 *         max_bin_len = buf_len
 */
    __pyx_v_max_str_len = __pyx_v_buf_len;

    /* "msgpack/_unpacker.pyx":179
 *     get_data_from_buffer(packed, &view, &buf, &buf_len)
 * 
 *     if max_str_len == -1:             # <<<<<<<<<<<<<<
 *         max_str_len = buf_len
 *     if max_bin_len == -1:
 */
  }

  /* "msgpack/_unpacker.pyx":181
 *     if max_str_len == -1:
 *         max_str_len = buf_len
 *     if max_bin_len == -1:             # <<<<<<<<<<<<<<
 *         max_bin_len = buf_len
 *     if max_array_len == -1:
 */
  __pyx_t_1 = (__pyx_v_max_bin_len == -1L);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":182
 *         max_str_len = buf_len
 *     if max_bin_len == -1:
 *         max_bin_len = buf_len             # <<<<<<<<<<<<<<
 *     if max_array_len == -1:
 *         max_array_len = buf_len
 */
    __pyx_v_max_bin_len = __pyx_v_buf_len;

    /* "msgpack/_unpacker.pyx":181
 *     if max_str_len == -1:
 *         max_str_len = buf_len
 *     if max_bin_len == -1:             # <<<<<<<<<<<<<<
 *         max_bin_len = buf_len
 *     if max_array_len == -1:
 */
  }

  /* "msgpack/_unpacker.pyx":183
 *     if max_bin_len == -1:
 *         max_bin_len = buf_len
 *     if max_array_len == -1:             # <<<<<<<<<<<<<<
 *         max_array_len = buf_len
 *     if max_map_len == -1:
 */
  __pyx_t_1 = (__pyx_v_max_array_len == -1L);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":184
 *         max_bin_len = buf_len
 *     if max_array_len == -1:
 *         max_array_len = buf_len             # <<<<<<<<<<<<<<
 *     if max_map_len == -1:
 *         max_map_len = buf_len//2
 */
    __pyx_v_max_array_len = __pyx_v_buf_len;

    /* "msgpack/_unpacker.pyx":183
 *     if max_bin_len == -1:
 *         max_bin_len = buf_len
 *     if max_array_len == -1:             # <<<<<<<<<<<<<<
 *         max_array_len = buf_len
 *     if max_map_len == -1:
 */
  }

  /* "msgpack/_unpacker.pyx":185
 *     if max_array_len == -1:
 *         max_array_len = buf_len
 *     if max_map_len == -1:             # <<<<<<<<<<<<<<
 *         max_map_len = buf_len//2
 *     if max_ext_len == -1:
 */
  __pyx_t_1 = (__pyx_v_max_map_len == -1L);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":186
 *         max_array_len = buf_len
 *     if max_map_len == -1:
 *         max_map_len = buf_len//2             # <<<<<<<<<<<<<<
 *     if max_ext_len == -1:
 *         max_ext_len = buf_len
 */
    __pyx_v_max_map_len = __Pyx_div_Py_ssize_t(__pyx_v_buf_len, 2);

    /* "msgpack/_unpacker.pyx":185
 *     if max_array_len == -1:
 *         max_array_len = buf_len
 *     if max_map_len == -1:             # <<<<<<<<<<<<<<
 *         max_map_len = buf_len//2
 *     if max_ext_len == -1:
 */
  }

  /* "msgpack/_unpacker.pyx":187
 *     if max_map_len == -1:
 *         max_map_len = buf_len//2
 *     if max_ext_len == -1:             # <<<<<<<<<<<<<<
 *         max_ext_len = buf_len
 * 
 */
  __pyx_t_1 = (__pyx_v_max_ext_len == -1L);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":188
 *         max_map_len = buf_len//2
 *     if max_ext_len == -1:
 *         max_ext_len = buf_len             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_v_max_ext_len = __pyx_v_buf_len;

    /* "msgpack/_unpacker.pyx":187
 *     if max_map_len == -1:
 *         max_map_len = buf_len//2
 *     if max_ext_len == -1:             # <<<<<<<<<<<<<<
 *         max_ext_len = buf_len
 * 
 */
  }

  /* "msgpack/_unpacker.pyx":190
 *         max_ext_len = buf_len
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         init_ctx(&ctx, object_hook, object_pairs_hook, list_hook, ext_hook,
 *                  use_list, raw, timestamp, strict_map_key, cerr,
 */
  /*try:*/ {

    /* "msgpack/_unpacker.pyx":191
 * 
 *     try:
 *         init_ctx(&ctx, object_hook, object_pairs_hook, list_hook, ext_hook,             # <<<<<<<<<<<<<<
 *                  use_list, raw, timestamp, strict_map_key, cerr,
 *                  max_str_len, max_bin_len, max_array_len, max_map_len, max_ext_len)
 */
    __pyx_t_4 = __pyx_f_7msgpack_9_cmsgpack_init_ctx((&__pyx_v_ctx), __pyx_v_object_hook, __pyx_v_object_pairs_hook, __pyx_v_list_hook, __pyx_v_ext_hook, __pyx_v_use_list, __pyx_v_raw, __pyx_v_timestamp, __pyx_v_strict_map_key, __pyx_v_cerr, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 191, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "msgpack/_unpacker.pyx":194
 *                  use_list, raw, timestamp, strict_map_key, cerr,
 *                  max_str_len, max_bin_len, max_array_len, max_map_len, max_ext_len)
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)             # <<<<<<<<<<<<<<
 *     finally:
 *         PyBuffer_Release(&view);
 */
    __pyx_t_3 = unpack_construct((&__pyx_v_ctx), __pyx_v_buf, __pyx_v_buf_len, (&__pyx_v_off)); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(1, 194, __pyx_L10_error)
    __pyx_v_ret = __pyx_t_3;
  }

  /* "msgpack/_unpacker.pyx":196
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)
 *     finally:
 *         PyBuffer_Release(&view);             # <<<<<<<<<<<<<<
 * 
 *     if ret == 1:
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyBuffer_Release((&__pyx_v_view));
      goto __pyx_L11;
    }
    __pyx_L10_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_3 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyBuffer_Release((&__pyx_v_view));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L11:;
  }

  /* "msgpack/_unpacker.pyx":198
 *         PyBuffer_Release(&view);
 * 
 *     if ret == 1:             # <<<<<<<<<<<<<<
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 */
  __pyx_t_1 = (__pyx_v_ret == 1);
  if (__pyx_t_1) {

    /* "msgpack/_unpacker.pyx":199
 * 
 *     if ret == 1:
 *         obj = unpack_data(&ctx)             # <<<<<<<<<<<<<<
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 */
    __pyx_t_4 = unpack_data((&__pyx_v_ctx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_obj = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "msgpack/_unpacker.pyx":200
 *     if ret == 1:
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:             # <<<<<<<<<<<<<<
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 */
    __pyx_t_1 = (__pyx_v_off < __pyx_v_buf_len);
    if (unlikely(__pyx_t_1)) {

      /* "msgpack/_unpacker.pyx":201
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))             # <<<<<<<<<<<<<<
 *         return obj
 *     unpack_clear(&ctx)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ExtraData); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyBytes_FromStringAndSize((__pyx_v_buf + __pyx_v_off), (__pyx_v_buf_len - __pyx_v_off)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_15, __pyx_v_obj, __pyx_t_14};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 201, __pyx_L1_error)

      /* "msgpack/_unpacker.pyx":200
 *     if ret == 1:
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:             # <<<<<<<<<<<<<<
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 */
    }

    /* "msgpack/_unpacker.pyx":202
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj             # <<<<<<<<<<<<<<
 *     unpack_clear(&ctx)
 *     if ret == 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_obj);
    __pyx_r = __pyx_v_obj;
    goto __pyx_L0;

    /* "msgpack/_unpacker.pyx":198
 *         PyBuffer_Release(&view);
 * 
 *     if ret == 1:             # <<<<<<<<<<<<<<
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 */
  }

  /* "msgpack/_unpacker.pyx":203
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 *     unpack_clear(&ctx)             # <<<<<<<<<<<<<<
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")
 */
  unpack_clear((&__pyx_v_ctx));

  /* "msgpack/_unpacker.pyx":204
 *         return obj
 *     unpack_clear(&ctx)
 *     if ret == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 */
  switch (__pyx_v_ret) {
    case 0:

    /* "msgpack/_unpacker.pyx":205
 *     unpack_clear(&ctx)
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")             # <<<<<<<<<<<<<<
 *     elif ret == -2:
 *         raise FormatError
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 205, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":204
 *         return obj
 *     unpack_clear(&ctx)
 *     if ret == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 */
    break;
    case -2L:

    /* "msgpack/_unpacker.pyx":207
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 *         raise FormatError             # <<<<<<<<<<<<<<
 *     elif ret == -3:
 *         raise StackError
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FormatError); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 207, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":206
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:             # <<<<<<<<<<<<<<
 *         raise FormatError
 *     elif ret == -3:
 */
    break;
    case -3L:

    /* "msgpack/_unpacker.pyx":209
 *         raise FormatError
 *     elif ret == -3:
 *         raise StackError             # <<<<<<<<<<<<<<
 *     raise ValueError("Unpack failed: error = %d" % (ret,))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_StackError); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 209, __pyx_L1_error)

    /* "msgpack/_unpacker.pyx":208
 *     elif ret == -2:
 *         raise FormatError
 *     elif ret == -3:             # <<<<<<<<<<<<<<
 *         raise StackError
 *     raise ValueError("Unpack failed: error = %d" % (ret,))
 */
    break;
    default: break;
  }

  /* "msgpack/_unpacker.pyx":210
 *     elif ret == -3:
 *         raise StackError
 *     raise ValueError("Unpack failed: error = %d" % (ret,))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_ret, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unpack_failed_error, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 210, __pyx_L1_error)

  /* "msgpack/_unpacker.pyx":143
 * 
 * 
 * def unpackb(object packed, *, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=False, int timestamp=0, bint strict_map_key=True,
 *             unicode_errors=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("msgpack._cmsgpack.unpackb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_unpacker.pyx":320
 *     cdef uint64_t stream_offset
 * 
 *     def __cinit__(self):             # <